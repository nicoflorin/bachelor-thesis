{"version":3,"sources":["images lazy /^/.*$/ groupOptions: {} namespace object","constants/roles.ts","constants/game.ts","constants/firebase.ts","storage/firebase.ts","model/User.ts","constants/badges.ts","stores/userStore.ts","stores/authStore.ts","model/Quiz.ts","model/QuizTopic.ts","stores/quizStore.ts","stores/gameStore.ts","stores/index.ts","constants/routes.ts","hooks/useImage.tsx","components/General/Image.tsx","components/AppBar/index.tsx","components/App/Header.tsx","components/Landing/index.tsx","components/SignUp/index.tsx","components/SignIn/index.tsx","components/CreateQuiz/index.tsx","storage/fileStorage.ts","components/CreateQuiz/CreateQuizForm.tsx","components/Game/QuestionList.tsx","components/General/LevelProgress.tsx","components/Game/GameOverModal.tsx","components/General/JokerIcon.tsx","components/Game/PlayQuiz.tsx","components/Game/index.tsx","components/App/NotFound.tsx","components/Leaderboard/index.tsx","components/Achievements/CompletedQuiz.tsx","components/Achievements/index.tsx","components/Account/UpdatePassword.tsx","components/Account/index.tsx","components/App/ProtectedRoute.tsx","components/App/index.tsx","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","ROLES","JOKER","USER_REF","UserCollection","db","collection","QUIZ_TOPICS_REF","QUIZ_REF","QuizTopicsCollection","QuizCollection","FIREBASE_ERRORS","FbApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","FbDb","getFirestore","FbAuth","getAuth","FbStorage","getStorage","LEVEL_OFFSET","QUESTION_LEVEL_POINTS","questionLevelToPoint","level","jokers","type","JOKER_5050","name","count","used","run","console","log","JOKER_TIMER_STOP","jokerName","joker","find","DEFAULT_JOKERS","forEach","push","BADGES","User","userId","firstname","lastname","email","role","points","gamesPlayedCount","badges","completedQuizTopics","this","makeAutoObservable","length","foundJoker","a","user","classToPlain","docRef","userDocRef","doc","setDoc","Math","floor","badge","union","addBadge","quizTopicId","STUDENT","obj","Empty","assign","addDoc","error","q","query","where","getDocs","querySnapshot","empty","CreateFromPlain","data","allUsers","userStore","rootStore","currentUser","currentUserId","leaderboardUsers","undefined","makePersistable","properties","storage","window","localStorage","test","runInAction","New","setCurrentUserId","setCurrentUser","GetUser","GetAllPlayers","sortArray","by","order","setLeaderboardUsers","AuthStore","authUser","onAuthStateChanged","password","isTeacher","createUserWithEmailAndPassword","toLowerCase","TEACHER","addUser","signInWithEmailAndPassword","pullUser","reset","signOut","updatePassword","questionTemplate","text","correctAnswer","wrongAnswer1","wrongAnswer2","wrongAnswer3","imageUrl","Quiz","quizId","questions","quiz","quizDocRef","QuizTopic","createdBy","createdByName","isActive","quizTopic","quizTopicDocRef","GetByTopic","allQuizTopics","quizTopicIds","filteredQuizTopics","QuizStore","newQuizTopic","newQuiz","searchQuizTopics","quizTopicName","createdByUserId","getCurrentUserId","getCurrentUser","getName","addNewQuestion","index","splice","update","GetAll","GetAllOfUser","allQuizTopicsOfUser","emptyQuizTopics","GetMany","allCompletedQuizTopicsOfUser","getQuizForTopic","setEditQuizTopic","filter","includes","getQuiz","indexOf","ALL_BADGES","BADGE_WON_GAME_1","img","BADGE_WON_GAME_5","BADGE_WON_GAME_10","BADGE_NO_JOKER","BADGE_WON_TIME_5","BADGE_WON_TIME_2","BADGE_WON_TIME_1","BADGE_WON_TIME_30","getBadge","BADGE_DUMMY","activeQuizTemplate","gameOver","earnedPoints","GameStore","activeQuiz","activeQuestionIdx","secondsRemaining","timerId","hasLevelUp","hasWonGame","jokerUsed","secondsElapsed","wonBadges","GAME_CONSTANTS","convertQuizToActiveQuiz","question","active","activeQuestion","getActiveQuestion","done","getMinusPoints","minusPoints","round","quizStore","setActiveQuiz","catch","isSecure","answers","shuffle","isCorrect","i","convertQuestionToActiveQuestion","initJokers","getQuestionCount","setActiveQuestionDone","setActiveQuestionActive","resetTimer","endGame","chkGameOver","nextQuestion","answer","correctAnswerSelected","wrongAnswerSelected","setInterval","clearInterval","endTimer","startTimer","init","setActiveQuizTopic","setWonBadges","updateUser","setGameOver","addPoints","getEarnedPoints","currentUserLevel","updateLevel","levelUp","increaseGamesPlayedCount","addCompletedQuizTopic","addBadges","Update","useJoker","runForAllJoker","wrongAnswersIdx","toRemove","sampleSize","pullAt","run5050Joker","runTimerStopJoker","getJokerCount","userBadges","newBadges","userBadge","StoresContext","React","createContext","authStore","gameStore","UserStore","useStores","useContext","LANDING","SIGN_UP","SIGN_IN","ACCOUNT","CREATE_QUIZ","CREATE_QUIZ_FORM","PLAY_GAME","LEADERBOARD","ACHIEVEMENTS","routes","nonAuthRoutes","to","Icon","HomeIcon","PersonAddIcon","LoginIcon","authRoutes","AddIcon","SportsEsportsIcon","LeaderboardIcon","EmojiEventsIcon","useImage","fileName","useState","loading","setLoading","setError","image","setImage","useEffect","response","default","fetchImage","Image","alt","className","rest","Typography","padStart","src","NavMenuButton","Button","sx","my","color","mr","startIcon","AppBarNonAuth","Box","flexGrow","display","xs","md","page","style","textDecoration","AppBarAuth","observer","anchorElUser","setAnchorElUser","anchorElNav","setAnchorElNav","navigate","useNavigate","handleCloseUserMenu","handleCloseNavMenu","sm","IconButton","size","onClick","event","currentTarget","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","MenuItem","component","Link","ListItemIcon","p","mt","divider","ROUTES","doSignOut","ResponsiveAppBar","isAuth","isAuthenticated","AppBar","position","Container","maxWidth","Toolbar","disableGutters","variant","noWrap","Header","title","gutterBottom","Landing","Stack","spacing","Card","CardContent","validationSchema","yup","required","min","SignUpForm","isLoading","setIsLoading","formik","useFormik","initialValues","onSubmit","values","doCreateUserWithEmailAndPassword","message","finally","onFinish","handleSubmit","noValidate","Grid","container","item","TextField","fullWidth","label","autoFocus","autoComplete","value","onChange","handleChange","touched","errors","helperText","FormControlLabel","control","Switch","mb","disabled","Alert","severity","SignUp","flexDirection","alignItems","Avatar","m","bgcolor","SignInForm","doSignInWithEmailAndPassword","margin","SignIn","CreateQuizTopic","topicName","setTopicName","Divider","textAlign","target","Fab","ml","setNewQuizTopic","QuizTopicList","pullAllQuizTopicsOfUser","getAllQuizTopics","List","ListItem","disablePadding","secondaryAction","edge","editQuizTopic","handleEditClick","ListItemButton","ListItemText","primary","secondary","CreateQuiz","IMAGE_PATH","uploadFileToStorage","file","path","reject","metadata","contentType","fileRef","ref","uploadTask","uploadBytesResumable","on","snapshot","state","getDownloadURL","downloadUrl","QuizItemImage","handleChangeImageUrl","imageUploadLoading","setImageUploadLoading","imageUploadError","setImageUploadError","uploadImage","uploadImageToStorage","url","bind","width","hidden","accept","files","reader","FileReader","onload","readyState","DONE","readAsDataURL","onImageChange","QuizItem","handleChangeQuestion","handleChangeCorrectAnswer","handleChangeWrongAnswer1","handleChangeWrongAnswer2","handleChangeWrongAnswer3","questionLabel","Accordion","AccordionSummary","expandIcon","minWidth","flexShrink","deleteNewQuizQuestion","fontSize","AccordionDetails","CreateQuizForm","getNewQuiz","getNewQuizTopic","CircularProgress","setNewQuizQuestionText","setNewQuizQuestionCorrectAnswer","setNewQuizQuestionWrongAnswer1","setNewQuizQuestionWrongAnswer2","setNewQuizQuestionWrongAnswer3","setNewQuizQuestionImageUrl","Breadcrumbs","preventDefault","submitQuizTopicForm","FormGroup","checked","inputProps","createQuizItems","addNewQuizQuestion","lastQuestion","last","addDisabled","questionMissingInformation","submitDisabled","QuestionListItem","props","icon","backgroundColor","borderRadius","paddingLeft","toLocaleString","QuestionList","getActiveQuiz","slice","reverse","LevelProgress","progress","LinearProgress","height","top","left","transform","border","boxShadow","LevelUp","dense","WonBadges","GameOverModal","getGameOver","totalPoints","getTotalPoints","userTotalPoints","neededPoints","getNextLevelPoints","getLevelProgress","getHasLevelUp","getWonBadges","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","justifyContent","float","JokerIcon","Question","Paper","verticalAlign","Answer","answerRef","useRef","setAnswerBackground","current","elevation","setTimeout","answerSelected","handleAnswerClick","textTransform","fontWeight","TimeProgress","getSecondsRemaining","Jokers","getJokers","Badge","badgeContent","PlayQuizStarted","alignContent","pt","PlayQuiz","onbeforeunload","SearchQuiz","searchTerm","setSearchTerm","InputProps","endAdornment","filterAllQuizTopicsByName","QuizTopicListItem","openSnackbar","setOpenSnackbar","snackbartext","setSnackbartext","isCompleted","isQuizTopicCompleted","handleClick","startGame","Snackbar","autoHideDuration","pullAllQuizTopics","getSearchQuizTopics","SelectGamePage","PlayGame","element","NotFound","Leaderboard","pullLeaderboardUsers","getLeaderboardUsers","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","scope","QuestionItem","CompletedQuiz","selectedQuiz","setSelectedQuiz","useParams","Level","Badges","remainingBadges","BadgeItem","badgeType","showZero","CompletedQuizTopicList","getCompletedQuizTopics","pullAllCompletedQuizTopicsOfUser","AchievementsOverview","Achievements","password1","password2","oneOf","UpdatePassword","doUpdatePassword","AccountInformation","Account","ProtectedRoute","Component","App","basename","CssBaseline","CreateQuizPage","CreateQuizFormPage","PlayGamePage","LeaderboardPage","AchievementsPage","AccountPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7249b879.chunk.js","sourcesContent":["var map = {\n\t\"./badges/badge_no_joker.png\": [\n\t\t392,\n\t\t3\n\t],\n\t\"./badges/badge_won_10_game.png\": [\n\t\t393,\n\t\t4\n\t],\n\t\"./badges/badge_won_1_game.png\": [\n\t\t394,\n\t\t5\n\t],\n\t\"./badges/badge_won_5_game.png\": [\n\t\t395,\n\t\t6\n\t],\n\t\"./badges/badge_won_time_1.png\": [\n\t\t396,\n\t\t7\n\t],\n\t\"./badges/badge_won_time_2.png\": [\n\t\t397,\n\t\t8\n\t],\n\t\"./badges/badge_won_time_30.png\": [\n\t\t398,\n\t\t9\n\t],\n\t\"./badges/badge_won_time_5.png\": [\n\t\t399,\n\t\t10\n\t],\n\t\"./wer_wird_millionar_icon.png\": [\n\t\t400,\n\t\t11\n\t],\n\t\"./winTrophyIcon.png\": [\n\t\t401,\n\t\t12\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 279;\nmodule.exports = webpackAsyncContext;","export enum ROLES {\r\n  STUDENT = \"1\",\r\n  TEACHER = \"2\",\r\n}\r\n","export const SECONDS_PER_QUESTION: number = 40\r\nexport const LEVEL_OFFSET: number = 1000000\r\n\r\nconst QUESTION_LEVEL_POINTS: any = {\r\n  1: 50,\r\n  2: 100,\r\n  3: 200,\r\n  4: 300,\r\n  5: 500,\r\n  6: 1000,\r\n  7: 2000,\r\n  8: 4000,\r\n  9: 8000,\r\n  10: 160000,\r\n  11: 320000,\r\n  12: 640000,\r\n  13: 125000,\r\n  14: 500000,\r\n  15: 1000000,\r\n}\r\n\r\n/**\r\n * Convertes Question Level to corresponding point it gives\r\n * @param level\r\n * @returns\r\n */\r\nexport const questionLevelToPoint = (level: number): number => {\r\n  return QUESTION_LEVEL_POINTS[level]\r\n}\r\n\r\n/**\r\n * Returns the needed points for the next level\r\n * @param currentLevel\r\n * @returns number\r\n */\r\nexport const nextLevelPoints = (currentLevel: number): number => {\r\n  return (currentLevel + 1) * LEVEL_OFFSET\r\n}\r\n\r\n//------------------------------\r\n// JOKERS\r\n//------------------------------\r\nexport enum JOKER {\r\n  JOKER_5050 = \"1\",\r\n  JOKER_TIMER_STOP = \"2\",\r\n}\r\n\r\nexport interface JokerType {\r\n  type: JOKER\r\n  name: string\r\n  count: number\r\n  used: boolean\r\n  run(): void\r\n}\r\nconst JOKER_5050: JokerType = {\r\n  type: JOKER.JOKER_5050,\r\n  name: \"50 : 50\",\r\n  count: 0,\r\n  used: false,\r\n  run: (): void => {\r\n    console.log(\"dummy\")\r\n  },\r\n}\r\n\r\nconst JOKER_TIMER_STOP: JokerType = {\r\n  type: JOKER.JOKER_TIMER_STOP,\r\n  name: \"Pause Time\",\r\n  count: 0,\r\n  used: false,\r\n  run: (): void => {\r\n    console.log(\"dummy\")\r\n  },\r\n}\r\n\r\nexport const jokers = [JOKER_5050, JOKER_TIMER_STOP]\r\n\r\nexport const jokerName = (type: JOKER) => {\r\n  const joker = jokers.find((joker) => {\r\n    return joker.type === type\r\n  })\r\n  return joker?.name\r\n}\r\n","import { collection, Firestore, doc } from \"firebase/firestore\"\r\n\r\n/**\r\n * USER COLLECTION\r\n */\r\nconst USER_REF: string = \"users\"\r\nexport const UserCollection = (db: Firestore) => collection(db, USER_REF)\r\nexport const UserDocRef = (db: Firestore, docRef: string) => doc(db, USER_REF, docRef)\r\n\r\n/**\r\n * QUIZ AND QUIZ TOPIC COLLECTION\r\n */\r\nconst QUIZ_TOPICS_REF: string = \"quiz_topics\"\r\nconst QUIZ_REF: string = \"quizzes\"\r\nexport const QuizTopicsCollection = (db: Firestore) => collection(db, QUIZ_TOPICS_REF)\r\nexport const QuizCollection = (db: Firestore) => collection(db, QUIZ_REF)\r\nexport const QuizTopicsDocRef = (db: Firestore, docRef: string) => doc(db, QUIZ_TOPICS_REF, docRef)\r\nexport const QuizDocRef = (db: Firestore, docRef: string) => doc(db, QUIZ_REF, docRef)\r\n\r\n/**\r\n * FIREBASE ERROR CODES\r\n */\r\nexport const FIREBASE_ERRORS: { [key: string]: string } = {\r\n  \"auth/user-not-found\": \"User not found\",\r\n  \"auth/email-already-in-use\": \"Email already in use\",\r\n  \"auth/weak-password\": \"Password needs to be at least 6 characters long\",\r\n  \"auth/wrong-password\": \"Wrong Password\",\r\n  \"auth/invalid-email\": \"Invalid Email\",\r\n}\r\n","import { initializeApp, FirebaseApp } from \"firebase/app\"\r\nimport { getFirestore, Firestore } from \"firebase/firestore\"\r\nimport { getAuth, Auth } from \"firebase/auth\"\r\nimport { getStorage, FirebaseStorage } from \"firebase/storage\"\r\n\r\n/**\r\n * Firebase Config variables\r\n */\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n}\r\n\r\nconst FbApp: FirebaseApp = initializeApp(config)\r\nconst FbDb: Firestore = getFirestore()\r\nconst FbAuth: Auth = getAuth(FbApp)\r\nconst FbStorage: FirebaseStorage = getStorage(FbApp)\r\n\r\nexport { FbApp, FbDb, FbAuth, FbStorage }\r\n","import { makeAutoObservable } from \"mobx\"\r\nimport { ROLES } from \"../constants/roles\"\r\nimport { addDoc, setDoc, getDocs, query, where } from \"firebase/firestore\"\r\nimport { UserCollection, UserDocRef } from \"../constants/firebase\"\r\nimport { FbDb } from \"../storage/firebase\"\r\nimport { classToPlain } from \"class-transformer\"\r\nimport { JOKER, jokers } from \"../constants/game\"\r\nimport { BADGES, BadgeType } from \"../constants/badges\"\r\nimport { find, union } from \"lodash\"\r\nimport { nextLevelPoints, LEVEL_OFFSET } from \"../constants/game\"\r\n\r\ninterface UserJoker {\r\n  type: JOKER\r\n  count: number\r\n}\r\n\r\nlet DEFAULT_JOKERS: UserJoker[] = []\r\njokers.forEach((joker) => {\r\n  DEFAULT_JOKERS.push({ type: joker.type, count: joker.count })\r\n})\r\n\r\n/**\r\n * The User object holds all informations of a user (both student and teacher)\r\n */\r\nexport default class User {\r\n  userId: string\r\n  firstname: string\r\n  lastname: string\r\n  email: string\r\n  role: ROLES\r\n  level: number\r\n  points: number\r\n  gamesPlayedCount: number\r\n  jokers: UserJoker[]\r\n  badges: BADGES[]\r\n  completedQuizTopics: string[]\r\n\r\n  constructor(\r\n    userId: string,\r\n    firstname: string,\r\n    lastname: string,\r\n    email: string,\r\n    role: ROLES,\r\n    level: number,\r\n    points: number,\r\n    gamesPlayedCount: number,\r\n    jokers: UserJoker[],\r\n    badges: BADGES[],\r\n    completedQuizTopics: string[]\r\n  ) {\r\n    this.userId = userId\r\n    this.firstname = firstname\r\n    this.lastname = lastname\r\n    this.email = email\r\n    this.role = role\r\n    this.level = level\r\n    this.points = points\r\n    this.gamesPlayedCount = gamesPlayedCount\r\n    this.jokers = jokers\r\n    this.badges = badges\r\n    this.completedQuizTopics = completedQuizTopics\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  private static Empty() {\r\n    return new User(\"\", \"\", \"\", \"\", ROLES.STUDENT, 0, 0, 0, DEFAULT_JOKERS, [], [])\r\n  }\r\n\r\n  /**\r\n   * Convert plain JS Object to User class Object\r\n   * @param obj\r\n   * @returns User\r\n   */\r\n  static CreateFromPlain(obj: any): User {\r\n    const user = User.Empty()\r\n    return Object.assign(user, obj)\r\n  }\r\n\r\n  /* GETTER / SETTER  */\r\n\r\n  getName() {\r\n    return `${this.firstname} ${this.lastname}`\r\n  }\r\n\r\n  getJokerCount(type: JOKER): number {\r\n    //set default if not initialized\r\n    if (this.jokers.length === 0) this.jokers = DEFAULT_JOKERS\r\n    const foundJoker: UserJoker | undefined = find(this.jokers, [\"type\", type])\r\n    return foundJoker?.count || 0\r\n  }\r\n\r\n  /**\r\n   * Creates a new User object and saves it in the DB\r\n   * @param firstname\r\n   * @param lastname\r\n   * @param email\r\n   * @param role\r\n   * @returns Promise<User>\r\n   */\r\n  static async New(firstname: string, lastname: string, email: string, role: ROLES) {\r\n    const user = User.Empty()\r\n    user.firstname = firstname\r\n    user.lastname = lastname\r\n    user.email = email\r\n    user.role = role\r\n    try {\r\n      //create new emtpy doc\r\n      const userDocRef = await addDoc(UserCollection(FbDb), {})\r\n      // set key as unique id\r\n      user.userId = userDocRef.id\r\n      // update with userId\r\n      await setDoc(userDocRef, classToPlain(user))\r\n    } catch (error) {\r\n      console.error(\"Error Adding User: \", error)\r\n    }\r\n\r\n    return user\r\n  }\r\n\r\n  /**\r\n   * Gets a User from the database based on the email\r\n   * @param email\r\n   * @returns Promise<User>\r\n   */\r\n  static async GetUser(email: string) {\r\n    let user: User = User.Empty()\r\n    try {\r\n      const q = query(UserCollection(FbDb), where(\"email\", \"==\", email))\r\n      const querySnapshot = await getDocs(q)\r\n      if (querySnapshot.empty) {\r\n        throw Error(`ERROR, no user found with email ${email}`)\r\n      }\r\n      querySnapshot.forEach((doc) => {\r\n        user = User.CreateFromPlain(doc.data())\r\n      })\r\n    } catch (e) {\r\n      throw Error(`ERROR, Unable to pull user with email ${email}`)\r\n    }\r\n\r\n    return user\r\n  }\r\n\r\n  /**\r\n   * Update the user in the database\r\n   * @returns Promise<void>\r\n   */\r\n  async Update() {\r\n    const user = classToPlain(this)\r\n    const userDocRef = UserDocRef(FbDb, this.userId)\r\n    await setDoc(userDocRef, user)\r\n  }\r\n\r\n  /**\r\n   * Get all users from database\r\n   * @returns Promise<User[]>\r\n   */\r\n  static async GetAll() {\r\n    const allUsers: User[] = []\r\n    const querySnapshot = await getDocs(UserCollection(FbDb))\r\n    querySnapshot.forEach((doc) => {\r\n      const user = User.CreateFromPlain(doc.data())\r\n      allUsers.push(user)\r\n    })\r\n    return allUsers\r\n  }\r\n\r\n  /**\r\n   * Get all player users from database\r\n   * @returns Promise<User[]>\r\n   */\r\n  static async GetAllPlayers() {\r\n    const allUsers: User[] = []\r\n    const q = query(UserCollection(FbDb), where(\"role\", \"==\", ROLES.STUDENT))\r\n    const querySnapshot = await getDocs(q)\r\n    querySnapshot.forEach((doc) => {\r\n      const user = User.CreateFromPlain(doc.data())\r\n      allUsers.push(user)\r\n    })\r\n    return allUsers\r\n  }\r\n\r\n  /**\r\n   * Add points to user\r\n   * @param points\r\n   */\r\n  addPoints(points: number): void {\r\n    this.points += points\r\n  }\r\n\r\n  /**\r\n   * Increase player level, if necessary\r\n   */\r\n  updateLevel(): void {\r\n    this.level = Math.floor(this.points / 1000000)\r\n  }\r\n\r\n  /**\r\n   * Increase games player counter\r\n   */\r\n  increaseGamesPlayedCount(): void {\r\n    this.gamesPlayedCount += 1\r\n  }\r\n\r\n  /**\r\n   * Task for when a joker is used\r\n   * @param type JOKER\r\n   * @returns  void\r\n   */\r\n  useJoker(type: JOKER): void {\r\n    const foundJoker: UserJoker | undefined = find(this.jokers, [\"type\", type])\r\n    if (!foundJoker) return\r\n    //decrease count of specific joker\r\n    if (foundJoker.count > 0) {\r\n      foundJoker.count -= 1\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User reached a new level:\r\n   * - add new jokers\r\n   */\r\n  levelUp(): void {\r\n    this.jokers.forEach((joker) => {\r\n      joker.count += 1\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Add Badge uniquely to users won badges\r\n   * @param badge BADGE\r\n   */\r\n  addBadge(badge: BadgeType) {\r\n    this.badges = union(this.badges, [badge.type])\r\n  }\r\n\r\n  /**\r\n   * Add a list of won badges to user\r\n   * @param badges BADGE[]\r\n   */\r\n  addBadges(badges: BadgeType[]) {\r\n    badges.forEach((badge) => {\r\n      this.addBadge(badge)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Calculates the progress of the current Level (0-100%)\r\n   * @returns number\r\n   */\r\n  getLevelProgress(): number {\r\n    return ((this.points % LEVEL_OFFSET) / LEVEL_OFFSET) * 100\r\n  }\r\n\r\n  /**\r\n   * Gets the needed points for the next level\r\n   * @returns number\r\n   */\r\n  getNextLevelPoints(): number {\r\n    return nextLevelPoints(this.level)\r\n  }\r\n\r\n  /**\r\n   * Add QuizTopicId to completed list of quizTopics\r\n   * @param quizTopicId string\r\n   */\r\n  addCompletedQuizTopic(quizTopicId: string) {\r\n    this.completedQuizTopics = union(this.completedQuizTopics, [quizTopicId])\r\n  }\r\n}\r\n","import { find } from \"lodash\"\r\n\r\nexport enum BADGES {\r\n  BADGE_DUMMY = \"0,\",\r\n  BADGE_WON_GAME_1 = \"1\",\r\n  BADGE_WON_GAME_5 = \"2\",\r\n  BADGE_WON_GAME_10 = \"3\",\r\n  BADGE_NO_JOKER = \"4\",\r\n  BADGE_WON_TIME_5 = \"5\",\r\n  BADGE_WON_TIME_2 = \"6\",\r\n  BADGE_WON_TIME_1 = \"7\",\r\n  BADGE_WON_TIME_30 = \"8\",\r\n}\r\n\r\nexport interface BadgeType {\r\n  type: BADGES\r\n  text: string\r\n  img: string\r\n}\r\n\r\n// WON GAMES\r\nexport const BADGE_WON_GAME_1: BadgeType = {\r\n  type: BADGES.BADGE_WON_GAME_1,\r\n  text: \"Won 1 Game\",\r\n  img: \"badge_won_1_game.png\",\r\n}\r\n\r\nexport const BADGE_WON_GAME_5: BadgeType = {\r\n  type: BADGES.BADGE_WON_GAME_5,\r\n  text: \"Won 5 Games\",\r\n  img: \"badge_won_5_game.png\",\r\n}\r\n\r\nexport const BADGE_WON_GAME_10: BadgeType = {\r\n  type: BADGES.BADGE_WON_GAME_10,\r\n  text: \"Won 10 Games\",\r\n  img: \"badge_won_10_game.png\",\r\n}\r\n\r\n// NO JOKER\r\nexport const BADGE_NO_JOKER: BadgeType = {\r\n  type: BADGES.BADGE_NO_JOKER,\r\n  text: \"Won Game without Joker\",\r\n  img: \"badge_no_joker.png\",\r\n}\r\n\r\n// TIME BADGES\r\nexport const BADGE_WON_TIME_5: BadgeType = {\r\n  type: BADGES.BADGE_WON_TIME_5,\r\n  text: \"Won Game in 5 Minutes\",\r\n  img: \"badge_won_time_5.png\",\r\n}\r\n\r\nexport const BADGE_WON_TIME_2: BadgeType = {\r\n  type: BADGES.BADGE_WON_TIME_2,\r\n  text: \"Won Game in 2 Minutes\",\r\n  img: \"badge_won_time_2.png\",\r\n}\r\n\r\nexport const BADGE_WON_TIME_1: BadgeType = {\r\n  type: BADGES.BADGE_WON_TIME_1,\r\n  text: \"Won Game in 1 Minute\",\r\n  img: \"badge_won_time_1.png\",\r\n}\r\n\r\nexport const BADGE_WON_TIME_30: BadgeType = {\r\n  type: BADGES.BADGE_WON_TIME_30,\r\n  text: \"Won Game in 30 Seconds\",\r\n  img: \"badge_won_time_30.png\",\r\n}\r\n\r\nexport const ALL_BADGES = [\r\n  BADGE_WON_GAME_1,\r\n  BADGE_WON_GAME_5,\r\n  BADGE_WON_GAME_10,\r\n  BADGE_NO_JOKER,\r\n  BADGE_WON_TIME_5,\r\n  BADGE_WON_TIME_2,\r\n  BADGE_WON_TIME_1,\r\n  BADGE_WON_TIME_30,\r\n]\r\n\r\nexport const getBadge = (type: BADGES): BadgeType => {\r\n  return find(ALL_BADGES, [\"type\", type]) || ({ type: BADGES.BADGE_DUMMY, text: \"\" } as BadgeType)\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\"\r\nimport { makePersistable } from \"mobx-persist-store\"\r\nimport { RootStore } from \"./index\"\r\nimport User from \"../model/User\"\r\nimport { ROLES } from \"../constants/roles\"\r\nimport sortArray from \"sort-array\"\r\n\r\n/**\r\n * UserStore for all logged in user data\r\n */\r\nclass userStore {\r\n  currentUser: User | undefined\r\n  currentUserId: string | undefined\r\n  leaderboardUsers: User[] | undefined\r\n  rootStore: RootStore\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore\r\n    this.currentUser = undefined\r\n    this.currentUserId = undefined\r\n    this.leaderboardUsers = undefined\r\n\r\n    makeAutoObservable(this)\r\n    makePersistable(this, {\r\n      name: \"UserStore\",\r\n      properties: [\"currentUserId\", \"currentUser\"],\r\n      storage: window.localStorage,\r\n    }).then((test) => {\r\n      //plain to class conversion\r\n      runInAction(() => {\r\n        this.currentUser = User.CreateFromPlain(this.currentUser)\r\n      })\r\n    })\r\n  }\r\n\r\n  // *** GETTER / SETTER ***\r\n  setCurrentUserId(id: string): void {\r\n    this.currentUserId = id\r\n  }\r\n\r\n  getCurrentUserId(): string {\r\n    return this.currentUserId || \"\"\r\n  }\r\n\r\n  setCurrentUser(user: User): void {\r\n    this.currentUser = user\r\n  }\r\n\r\n  getCurrentUser(): User | undefined {\r\n    return this.currentUser\r\n  }\r\n\r\n  setLeaderboardUsers(leaderboardUsers: User[]) {\r\n    this.leaderboardUsers = leaderboardUsers\r\n  }\r\n\r\n  getLeaderboardUsers(): User[] | undefined {\r\n    return this.leaderboardUsers\r\n  }\r\n\r\n  /**\r\n   * Reset the state of the store\r\n   */\r\n  reset() {\r\n    this.currentUser = undefined\r\n    this.currentUserId = undefined\r\n    this.leaderboardUsers = undefined\r\n  }\r\n\r\n  /**\r\n   * Add User to Store\r\n   * @param user\r\n   */\r\n  async addUser(firstname: string, lastname: string, email: string, role: ROLES) {\r\n    const user = await User.New(firstname, lastname, email, role)\r\n    this.setCurrentUserId(user.userId)\r\n    this.setCurrentUser(user)\r\n  }\r\n\r\n  /**\r\n   * Get User from backend\r\n   * @param email\r\n   */\r\n  async pullUser(email: string) {\r\n    const user = await User.GetUser(email)\r\n    this.setCurrentUserId(user.userId)\r\n    this.setCurrentUser(user)\r\n  }\r\n\r\n  /**\r\n   * Get all Users from backend\r\n   */\r\n  async pullLeaderboardUsers() {\r\n    let leaderboardUsers = await User.GetAllPlayers()\r\n    //nach Gesamtsumme (absteigend), Level (absteigend) und Anzahl Spiele (aufsteigend).\r\n\r\n    leaderboardUsers = sortArray(leaderboardUsers, {\r\n      by: [\"points\", \"level\", \"gamesPlayedCount\"],\r\n      order: [\"desc\", \"desc\", \"asc\"],\r\n    })\r\n    this.setLeaderboardUsers(leaderboardUsers)\r\n  }\r\n}\r\n\r\nexport default userStore\r\n","import {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n  updatePassword,\r\n} from \"firebase/auth\"\r\nimport { runInAction, makeAutoObservable } from \"mobx\"\r\nimport { ROLES } from \"../constants/roles\"\r\nimport userStore from \"./userStore\"\r\nimport { RootStore } from \"./index\"\r\nimport { FbAuth } from \"../storage/firebase\"\r\n\r\n/**\r\n * AuthStore for all user authentication functionalities\r\n */\r\nclass AuthStore {\r\n  rootStore: RootStore\r\n  authUser: any\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore\r\n    this.authUser = null\r\n    makeAutoObservable(this)\r\n\r\n    // listen to user changes (login, logout)\r\n    onAuthStateChanged(FbAuth, (user) => {\r\n      //because async, it needs to run in action\r\n      runInAction(() => {\r\n        this.authUser = user\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Creates a new user with email and password\r\n   * @param firstname\r\n   * @param lastname\r\n   * @param email\r\n   * @param password\r\n   * @param isTeacher\r\n   * @returns Promise<void>\r\n   */\r\n  doCreateUserWithEmailAndPassword(firstname: string, lastname: string, email: string, password: string, isTeacher: boolean) {\r\n    return createUserWithEmailAndPassword(FbAuth, email.toLowerCase(), password).then(() => {\r\n      const userStore: userStore = this.rootStore.userStore\r\n      //add to store\r\n      const role: ROLES = isTeacher ? ROLES.TEACHER : ROLES.STUDENT\r\n      userStore.addUser(firstname, lastname, email, role)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Logs in a user with email and password\r\n   * @param email\r\n   * @param password\r\n   * @returns Promise<UserCredential>\r\n   */\r\n  doSignInWithEmailAndPassword(email: string, password: string) {\r\n    return signInWithEmailAndPassword(FbAuth, email.toLowerCase(), password).then((authUser) => {\r\n      const userStore = this.rootStore.userStore\r\n      userStore.pullUser(email.toLowerCase())\r\n      return authUser\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Loggs a user out\r\n   * @returns Promise<void>\r\n   */\r\n  doSignOut() {\r\n    this.rootStore.userStore.reset()\r\n    return signOut(FbAuth)\r\n  }\r\n\r\n  /**\r\n   * Sets a new password for the logged in user\r\n   * @param password\r\n   * @returns Promise<void>\r\n   */\r\n  doUpdatePassword(password: string) {\r\n    return updatePassword(this.authUser, password)\r\n  }\r\n\r\n  /**\r\n   * Checks if a user is correctly authenticated\r\n   * @returns boolean\r\n   */\r\n  isAuthenticated(): boolean {\r\n    return !(this.authUser == null)\r\n  }\r\n}\r\n\r\nexport default AuthStore\r\n","import { makeAutoObservable } from \"mobx\"\r\nimport { getDocs, addDoc, setDoc, query, where } from \"firebase/firestore\"\r\nimport { QuizCollection, QuizDocRef } from \"../constants/firebase\"\r\nimport { FbDb } from \"../storage/firebase\"\r\nimport { classToPlain } from \"class-transformer\"\r\n\r\nexport interface Question {\r\n  text: string\r\n  correctAnswer: string\r\n  wrongAnswer1: string\r\n  wrongAnswer2: string\r\n  wrongAnswer3: string\r\n  imageUrl: string\r\n}\r\n\r\nconst questionTemplate: Question = {\r\n  text: \"\",\r\n  correctAnswer: \"\",\r\n  wrongAnswer1: \"\",\r\n  wrongAnswer2: \"\",\r\n  wrongAnswer3: \"\",\r\n  imageUrl: \"\",\r\n}\r\n\r\n/**\r\n * The Quiz object is used to hold the question/answer informationes of a Quiz Topic\r\n */\r\nexport default class Quiz {\r\n  quizId: string\r\n  quizTopicId: string\r\n  questions: Question[]\r\n\r\n  constructor(quizId: string, quizTopicId: string, questions: Question[]) {\r\n    this.quizId = quizId\r\n    this.quizTopicId = quizTopicId\r\n    this.questions = questions\r\n\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  private static Empty() {\r\n    return new Quiz(\"\", \"\", [])\r\n  }\r\n\r\n  /**\r\n   * Convert plain JS Object to Quiz class Object\r\n   * @param obj\r\n   * @returns Quiz\r\n   */\r\n  static CreateFromPlain(obj: any): Quiz {\r\n    const quiz = Quiz.Empty()\r\n    return Object.assign(quiz, obj)\r\n  }\r\n\r\n  /**\r\n   * Add new quiz to database\r\n   * @param quizTopicId\r\n   * @returns Promise<QuizTopic>\r\n   */\r\n  static async New(quizTopicId: string) {\r\n    const questions: Question[] = [] //first dummy question\r\n    questions.push(questionTemplate)\r\n    const quiz = { quizTopicId, quizId: \"\", questions }\r\n    try {\r\n      //create new emtpy doc\r\n      const quizDocRef = await addDoc(QuizCollection(FbDb), {})\r\n      // set key as unique id\r\n      quiz.quizId = quizDocRef.id\r\n      // update with userId\r\n      await setDoc(quizDocRef, quiz)\r\n    } catch (error) {\r\n      console.error(\"Error Adding Quiz: \", error)\r\n    }\r\n    return Quiz.CreateFromPlain(quiz)\r\n  }\r\n\r\n  /**\r\n   * Update the quiz in the database\r\n   * @returns Promise<void>\r\n   */\r\n  async update() {\r\n    const quiz = classToPlain(this)\r\n    const quizDocRef = QuizDocRef(FbDb, this.quizId)\r\n    await setDoc(quizDocRef, quiz)\r\n  }\r\n\r\n  /**\r\n   * Get a quiz by its topic id\r\n   * @param quizTopicId\r\n   * @returns Promise<Quiz>\r\n   */\r\n  static async GetByTopic(quizTopicId: string) {\r\n    let quiz = Quiz.Empty()\r\n\r\n    try {\r\n      const q = query(QuizCollection(FbDb), where(\"quizTopicId\", \"==\", quizTopicId))\r\n      const querySnapshot = await getDocs(q)\r\n      querySnapshot.forEach((doc) => {\r\n        quiz = Quiz.CreateFromPlain(doc.data())\r\n      })\r\n    } catch (e) {\r\n      console.log(\"Unable to pull quiz\")\r\n    }\r\n    return quiz\r\n  }\r\n\r\n  addNewQuestion() {\r\n    this.questions.push(questionTemplate)\r\n  }\r\n}\r\n","import { makeAutoObservable } from \"mobx\"\r\nimport { QuizTopicsCollection, QuizTopicsDocRef } from \"../constants/firebase\"\r\nimport { FbDb } from \"../storage/firebase\"\r\nimport { getDocs, addDoc, setDoc, query, where } from \"firebase/firestore\"\r\nimport { classToPlain } from \"class-transformer\"\r\nimport Quiz from \"./../model/Quiz\"\r\n\r\n/**\r\n * The QuizTopic object is used to store informations of a topic generated by a user (teacher)\r\n */\r\nexport default class QuizTopic {\r\n  quizTopicId: string\r\n  createdBy: string\r\n  createdByName: string\r\n  name: string\r\n  isActive: boolean\r\n\r\n  constructor(quizTopicId: string, createdBy: string, name: string, createdByName: string, isActive: boolean) {\r\n    this.quizTopicId = quizTopicId\r\n    this.createdBy = createdBy\r\n    this.createdByName = createdByName\r\n    this.name = name\r\n    this.isActive = isActive\r\n\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  private static Empty() {\r\n    return new QuizTopic(\"\", \"\", \"\", \"\", true)\r\n  }\r\n\r\n  /**\r\n   * Convert plain JS Object to QuizTOpic class Object\r\n   * @param obj\r\n   * @returns QuizTopic\r\n   */\r\n  private static CreateFromPlain(obj: any): QuizTopic {\r\n    const quizTopic = QuizTopic.Empty()\r\n    return Object.assign(quizTopic, obj)\r\n  }\r\n\r\n  /**\r\n   * Add new quiz topic to database\r\n   * @param createdBy string\r\n   * @param name string\r\n   * @param createdByName string\r\n   * @returns Promise<QuizTopic>\r\n   */\r\n  static async New(createdBy: string, name: string, createdByName: string, isActive: boolean) {\r\n    const quizTopic = { createdBy, name, quizTopicId: \"\", createdByName }\r\n    try {\r\n      //create new emtpy doc\r\n      const quizTopicDocRef = await addDoc(QuizTopicsCollection(FbDb), {})\r\n      // set key as unique id\r\n      quizTopic.quizTopicId = quizTopicDocRef.id\r\n      // update with userId\r\n      await setDoc(quizTopicDocRef, quizTopic)\r\n    } catch (error) {\r\n      console.error(\"Error Adding QuizTopic: \", error)\r\n    }\r\n    return QuizTopic.CreateFromPlain(quizTopic)\r\n  }\r\n\r\n  /**\r\n   * Update the quiz topic in the database\r\n   * @returns Promise<void>\r\n   */\r\n  async update() {\r\n    const quizTopic = classToPlain(this)\r\n    const quizTopicDocRef = QuizTopicsDocRef(FbDb, this.quizTopicId)\r\n    await setDoc(quizTopicDocRef, quizTopic)\r\n  }\r\n\r\n  /**\r\n   * Get all Quiz Topics from database\r\n   * @returns Promise<QuizTopic[]>\r\n   */\r\n  static async GetAll() {\r\n    const allQuizTopics: QuizTopic[] = []\r\n    const querySnapshot = await getDocs(QuizTopicsCollection(FbDb))\r\n    querySnapshot.forEach((doc) => {\r\n      const quizTopic = QuizTopic.CreateFromPlain(doc.data())\r\n      allQuizTopics.push(quizTopic)\r\n    })\r\n    return allQuizTopics\r\n  }\r\n\r\n  /**\r\n   * Get all Quiz Topics from database filtered by a list of Ids\r\n   * @param quizTopicIds\r\n   * @returns Promise<QuizTopic[]>\r\n   */\r\n  static async GetMany(quizTopicIds: string[]) {\r\n    if (!quizTopicIds || quizTopicIds.length === 0) return []\r\n    const filteredQuizTopics: QuizTopic[] = []\r\n    const q = query(QuizTopicsCollection(FbDb), where(\"quizTopicId\", \"in\", quizTopicIds))\r\n    const querySnapshot = await getDocs(q)\r\n    querySnapshot.forEach((doc) => {\r\n      const quizTopic = QuizTopic.CreateFromPlain(doc.data())\r\n      filteredQuizTopics.push(quizTopic)\r\n    })\r\n    return filteredQuizTopics\r\n  }\r\n\r\n  /**\r\n   * Get all Quiz Topics of specific user from database\r\n   * @param userId\r\n   * @returns Promise<QuizTopic[]>\r\n   */\r\n  static async GetAllOfUser(userId: string) {\r\n    const allQuizTopics: QuizTopic[] = []\r\n    const q = query(QuizTopicsCollection(FbDb), where(\"createdBy\", \"==\", userId))\r\n    const querySnapshot = await getDocs(q)\r\n    querySnapshot.forEach((doc) => {\r\n      const quizTopic = QuizTopic.CreateFromPlain(doc.data())\r\n      allQuizTopics.push(quizTopic)\r\n    })\r\n    return allQuizTopics\r\n  }\r\n\r\n  /**\r\n   * Get the corresponding quiz for the topic\r\n   * @returns Promise<Quiz>\r\n   */\r\n  async getQuiz() {\r\n    const quiz = await Quiz.GetByTopic(this.quizTopicId)\r\n    return quiz\r\n  }\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\"\r\nimport { RootStore } from \"./index\"\r\nimport QuizTopic from \"./../model/QuizTopic\"\r\nimport Quiz from \"./../model/Quiz\"\r\n\r\n/**\r\n * QuizStore for all QuizTopic and Quiz related data\r\n */\r\nclass QuizStore {\r\n  rootStore: RootStore\r\n  allQuizTopics: QuizTopic[]\r\n  newQuizTopic: QuizTopic | undefined\r\n  newQuiz: Quiz | undefined\r\n  searchQuizTopics: QuizTopic[]\r\n  completedQuizTopics: QuizTopic[]\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore\r\n    this.allQuizTopics = []\r\n    this.searchQuizTopics = []\r\n    this.completedQuizTopics = []\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  // ** GETTER / SETTER ** //\r\n  getAllQuizTopics(): QuizTopic[] {\r\n    return this.allQuizTopics\r\n  }\r\n\r\n  getCompletedQuizTopics(): QuizTopic[] {\r\n    return this.completedQuizTopics\r\n  }\r\n\r\n  setNewQuizTopic(quizTopicName: string): void {\r\n    const createdByUserId = this.rootStore.userStore.getCurrentUserId()\r\n    const createdByName = this.rootStore.userStore.getCurrentUser()?.getName() || \"\"\r\n    QuizTopic.New(createdByUserId, quizTopicName, createdByName, true).then((quizTopic) => {\r\n      runInAction(() => {\r\n        this.newQuizTopic = quizTopic\r\n      })\r\n      Quiz.New(quizTopic.quizTopicId).then((quiz) => {\r\n        runInAction(() => {\r\n          this.newQuiz = quiz\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  setEditQuizTopic(quizTopic: QuizTopic, quiz: Quiz): void {\r\n    this.newQuizTopic = quizTopic\r\n    this.newQuiz = quiz\r\n  }\r\n\r\n  getNewQuizTopic(): QuizTopic | undefined {\r\n    return this.newQuizTopic\r\n  }\r\n\r\n  getNewQuiz(): Quiz | undefined {\r\n    return this.newQuiz\r\n  }\r\n\r\n  addNewQuizQuestion(): void {\r\n    this.newQuiz?.addNewQuestion()\r\n  }\r\n\r\n  setNewQuizQuestionText(index: number, text: string): void {\r\n    if (!this.newQuiz) return\r\n    this.newQuiz.questions[index].text = text\r\n  }\r\n\r\n  setNewQuizQuestionCorrectAnswer(index: number, text: string): void {\r\n    if (!this.newQuiz) return\r\n    this.newQuiz.questions[index].correctAnswer = text\r\n  }\r\n\r\n  setNewQuizQuestionWrongAnswer1(index: number, text: string): void {\r\n    if (!this.newQuiz) return\r\n    this.newQuiz.questions[index].wrongAnswer1 = text\r\n  }\r\n\r\n  setNewQuizQuestionWrongAnswer2(index: number, text: string): void {\r\n    if (!this.newQuiz) return\r\n    this.newQuiz.questions[index].wrongAnswer2 = text\r\n  }\r\n\r\n  setNewQuizQuestionWrongAnswer3(index: number, text: string): void {\r\n    if (!this.newQuiz) return\r\n    this.newQuiz.questions[index].wrongAnswer3 = text\r\n  }\r\n\r\n  setNewQuizQuestionImageUrl(index: number, text: string): void {\r\n    if (!this.newQuiz) return\r\n    this.newQuiz.questions[index].imageUrl = text\r\n  }\r\n\r\n  getSearchQuizTopics(): QuizTopic[] {\r\n    return this.searchQuizTopics\r\n  }\r\n\r\n  deleteNewQuizQuestion(index: number) {\r\n    this.newQuiz?.questions.splice(index, 1)\r\n  }\r\n\r\n  /**\r\n   * Reset the New QuizTopic and Quiz\r\n   */\r\n  reset() {\r\n    this.newQuizTopic = undefined\r\n    this.newQuiz = undefined\r\n  }\r\n\r\n  /**\r\n   * Submit the Quiz Topic Edit form (save topic and quiz)\r\n   * @returns Promise<void>\r\n   */\r\n  async submitQuizTopicForm() {\r\n    if (!this.newQuizTopic) return\r\n    if (!this.newQuiz) return\r\n\r\n    //for completely new topic\r\n    if (!this.newQuizTopic.quizTopicId) {\r\n      const createdByName = this.rootStore.userStore.getCurrentUser()?.getName() || \"\"\r\n      await QuizTopic.New(this.newQuizTopic.createdBy, this.newQuizTopic.name, createdByName, this.newQuizTopic.isActive)\r\n    } else {\r\n      await this.newQuizTopic.update()\r\n    }\r\n\r\n    //for completely new quiz\r\n    if (!this.newQuiz.quizId) {\r\n      await Quiz.New(this.newQuizTopic.quizTopicId)\r\n    } else {\r\n      await this.newQuiz.update()\r\n    }\r\n\r\n    runInAction(() => {\r\n      if (this.newQuizTopic) {\r\n        this.allQuizTopics.push(this.newQuizTopic)\r\n        this.reset()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Empties Member Arrays\r\n   */\r\n  emptyQuizTopics(): void {\r\n    this.allQuizTopics = []\r\n    this.searchQuizTopics = []\r\n  }\r\n\r\n  /**\r\n   * Get all quizTopics\r\n   */\r\n  async pullAllQuizTopics() {\r\n    this.allQuizTopics = []\r\n    const allQuizTopics = await QuizTopic.GetAll()\r\n    runInAction(() => {\r\n      this.allQuizTopics = [...allQuizTopics]\r\n      this.searchQuizTopics = [...allQuizTopics]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get all quizTopics of logged in user\r\n   */\r\n  async pullAllQuizTopicsOfUser() {\r\n    this.allQuizTopics = []\r\n    const currentUserId: string = this.rootStore.userStore.getCurrentUserId()\r\n    const allQuizTopicsOfUser = await QuizTopic.GetAllOfUser(currentUserId)\r\n    this.emptyQuizTopics()\r\n    runInAction(() => {\r\n      this.allQuizTopics = [...allQuizTopicsOfUser]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get all completed quizTopics of logged in user\r\n   */\r\n  async pullAllCompletedQuizTopicsOfUser() {\r\n    this.allQuizTopics = []\r\n    const currentUser = this.rootStore.userStore.getCurrentUser()\r\n    if (!currentUser) return\r\n    const allCompletedQuizTopicsOfUser = await QuizTopic.GetMany(currentUser?.completedQuizTopics)\r\n    runInAction(() => {\r\n      this.completedQuizTopics = [...allCompletedQuizTopicsOfUser]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Pull a quiz and edit it\r\n   * @param quizTopic\r\n   */\r\n  async editQuizTopic(quizTopic: QuizTopic) {\r\n    this.reset()\r\n    const quiz: Quiz = await this.getQuizForTopic(quizTopic)\r\n    this.setEditQuizTopic(quizTopic, quiz)\r\n  }\r\n\r\n  /**\r\n   * filter the quiz topic list by a given name\r\n   * @param name Text to filter quiz topics by\r\n   * @returns Promise<void>\r\n   */\r\n  filterAllQuizTopicsByName(name: string): void {\r\n    if (!this.allQuizTopics) return\r\n    if (!name) this.searchQuizTopics = [...this.allQuizTopics]\r\n\r\n    this.searchQuizTopics = this.allQuizTopics.filter((quizTopic) => {\r\n      return quizTopic.name.toLowerCase().includes(name.toLowerCase())\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the quiz for a quiz topic\r\n   * @param quizTopic QuizTopic\r\n   * @returns Promise<Quiz>\r\n   */\r\n  async getQuizForTopic(quizTopic: QuizTopic): Promise<Quiz> {\r\n    const quiz = await quizTopic.getQuiz()\r\n    return quiz\r\n  }\r\n\r\n  /**\r\n   * checks if quizTopic is already completed by user\r\n   * @param quizTopic QuizTopic\r\n   * @returns boolean\r\n   */\r\n  isQuizTopicCompleted(quizTopic: QuizTopic): boolean {\r\n    const currentUser = this.rootStore.userStore.getCurrentUser()\r\n    return currentUser?.completedQuizTopics.indexOf(quizTopic.quizTopicId) !== -1\r\n  }\r\n}\r\nexport default QuizStore\r\n","import { makeAutoObservable, runInAction } from \"mobx\"\r\nimport Quiz, { Question } from \"../model/Quiz\"\r\nimport QuizTopic from \"./../model/QuizTopic\"\r\nimport { RootStore } from \"./index\"\r\nimport * as GAME_CONSTANTS from \"../constants/game\"\r\nimport { questionLevelToPoint, JokerType, JOKER } from \"../constants/game\"\r\nimport { shuffle, pullAt, sampleSize } from \"lodash\"\r\nimport { BadgeType, getBadge, BADGES } from \"../constants/badges\"\r\n\r\nexport interface ActiveAnswer {\r\n  text: string\r\n  isCorrect: boolean\r\n}\r\n\r\nexport interface ActiveQuestion {\r\n  level: number\r\n  points: number\r\n  done: boolean\r\n  active: boolean\r\n  question: string\r\n  isSecure: boolean\r\n  answers: ActiveAnswer[]\r\n  imageUrl: string | undefined\r\n}\r\n\r\ninterface ActiveQuiz {\r\n  questions: ActiveQuestion[]\r\n  gameOver: boolean\r\n  earnedPoints: number\r\n  quizTopicId: string\r\n}\r\n\r\nconst activeQuizTemplate: ActiveQuiz = {\r\n  questions: [],\r\n  gameOver: false,\r\n  earnedPoints: 0,\r\n  quizTopicId: \"\",\r\n}\r\n\r\n/**\r\n * GameStore for all game data during playing\r\n */\r\nclass GameStore {\r\n  rootStore: RootStore\r\n  activeQuiz: ActiveQuiz\r\n  activeQuestionIdx: number\r\n  secondsRemaining: number\r\n  timerId: NodeJS.Timer | undefined\r\n  jokers: JokerType[]\r\n  hasLevelUp: boolean\r\n  hasWonGame: boolean\r\n  jokerUsed: boolean\r\n  secondsElapsed: number\r\n  wonBadges: BadgeType[]\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore\r\n    this.activeQuiz = activeQuizTemplate\r\n    this.activeQuestionIdx = 0\r\n    this.secondsRemaining = GAME_CONSTANTS.SECONDS_PER_QUESTION\r\n    this.jokers = GAME_CONSTANTS.jokers\r\n    this.hasLevelUp = false\r\n    this.hasWonGame = false\r\n    this.jokerUsed = false\r\n    this.secondsElapsed = 0\r\n    this.wonBadges = []\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  // ** GETTER / SETTER **\r\n  setActiveQuiz(quiz: Quiz): void {\r\n    this.activeQuiz = this.convertQuizToActiveQuiz(quiz)\r\n  }\r\n\r\n  getActiveQuiz(): ActiveQuiz {\r\n    return this.activeQuiz\r\n  }\r\n\r\n  getActiveQuestion(): ActiveQuestion | undefined {\r\n    return this.activeQuiz.questions.find((question) => {\r\n      return question.active === true\r\n    })\r\n  }\r\n\r\n  getSecondsRemaining(): number {\r\n    return this.secondsRemaining\r\n  }\r\n\r\n  getJokers() {\r\n    return this.jokers\r\n  }\r\n\r\n  getGameOver() {\r\n    return this.activeQuiz.gameOver\r\n  }\r\n\r\n  getHasLevelUp() {\r\n    return this.hasLevelUp\r\n  }\r\n\r\n  getWonBadges() {\r\n    return this.wonBadges\r\n  }\r\n\r\n  private setGameOver() {\r\n    this.activeQuiz.gameOver = true\r\n  }\r\n\r\n  private setActiveQuestionDone() {\r\n    const activeQuestion = this.getActiveQuestion()\r\n    if (!activeQuestion) return\r\n    activeQuestion.done = true\r\n  }\r\n\r\n  private setActiveQuestionActive(active: boolean) {\r\n    const activeQuestion = this.getActiveQuestion()\r\n    if (!activeQuestion) return\r\n    activeQuestion.active = active\r\n  }\r\n\r\n  /**\r\n   * Get count of questions in active quiz\r\n   * @returns number\r\n   */\r\n  getQuestionCount() {\r\n    if (this.activeQuiz) return this.activeQuiz?.questions.length\r\n    else return 0\r\n  }\r\n\r\n  /**\r\n   * Get the total points a player has achieved (minus points not included)\r\n   * @returns number\r\n   */\r\n  getTotalPoints() {\r\n    return this.activeQuiz.earnedPoints\r\n  }\r\n\r\n  /**\r\n   * Get the total points a player has achieved. Minus possible malus points\r\n   * @returns number\r\n   */\r\n  getEarnedPoints() {\r\n    let earnedPoints = this.activeQuiz.earnedPoints - this.getMinusPoints()\r\n    if (earnedPoints < 0) earnedPoints = 0\r\n    return earnedPoints\r\n  }\r\n\r\n  /**\r\n   * Calculates the minus points and returns them\r\n   * @returns number\r\n   */\r\n  getMinusPoints() {\r\n    let minusPoints = 0\r\n    if (this.jokerUsed) {\r\n      minusPoints = Math.round(this.activeQuiz.earnedPoints / 4)\r\n    }\r\n    return minusPoints\r\n  }\r\n\r\n  /**\r\n   * Set the Quiz Topic as active\r\n   * @param quizTopic\r\n   */\r\n  setActiveQuizTopic(quizTopic: QuizTopic): void {\r\n    this.rootStore.quizStore\r\n      .getQuizForTopic(quizTopic)\r\n      .then((quiz) => {\r\n        this.setActiveQuiz(quiz)\r\n      })\r\n      .catch(() => console.log(\"Error: Could not set active quiz\"))\r\n  }\r\n\r\n  /**\r\n   * Converts a Question of Type Question to Type ActiveQuestion\r\n   * @param question\r\n   * @returns ActiveQuestion\r\n   */\r\n  private convertQuestionToActiveQuestion(question: Question, level: number, active: boolean, isSecure: boolean): ActiveQuestion {\r\n    const activeQuestion: ActiveQuestion = {\r\n      question: question.text,\r\n      done: false,\r\n      active: active,\r\n      level: level,\r\n      isSecure: isSecure,\r\n      points: questionLevelToPoint(level),\r\n      answers: shuffle([\r\n        { text: question.correctAnswer, isCorrect: true },\r\n        { text: question.wrongAnswer1, isCorrect: false },\r\n        { text: question.wrongAnswer2, isCorrect: false },\r\n        { text: question.wrongAnswer3, isCorrect: false },\r\n      ]),\r\n      imageUrl: question.imageUrl,\r\n    }\r\n    return activeQuestion\r\n  }\r\n\r\n  /**\r\n   * Converts a Quiz of Type Quiz to Type ActiveQuiz\r\n   * @param quiz\r\n   * @returns ActiveQuiz\r\n   */\r\n  private convertQuizToActiveQuiz(quiz: Quiz): ActiveQuiz {\r\n    const activeQuiz: ActiveQuiz = {\r\n      questions: [],\r\n      gameOver: false,\r\n      earnedPoints: 0,\r\n      quizTopicId: quiz.quizTopicId,\r\n    }\r\n    shuffle(quiz.questions).forEach((question, i) => {\r\n      const level = i + 1\r\n      const active = i === 0 ? true : false\r\n      const isSecure = level % 5 === 0 //every 5th is secure\r\n      activeQuiz.questions.push(this.convertQuestionToActiveQuestion(question, level, active, isSecure))\r\n    })\r\n    return activeQuiz\r\n  }\r\n\r\n  /**\r\n   * Initialize before each game starts\r\n   */\r\n  private init() {\r\n    this.timerId = undefined\r\n    this.secondsRemaining = GAME_CONSTANTS.SECONDS_PER_QUESTION\r\n    this.activeQuestionIdx = 0\r\n    this.activeQuiz = activeQuizTemplate\r\n    this.jokers = GAME_CONSTANTS.jokers\r\n    this.hasLevelUp = false\r\n    this.hasWonGame = false\r\n    this.jokerUsed = false\r\n    this.secondsElapsed = 0\r\n    this.wonBadges = []\r\n    this.initJokers()\r\n  }\r\n\r\n  /**\r\n   * Load next question\r\n   */\r\n  private nextQuestion(): void {\r\n    if (!this.activeQuiz) return\r\n    // prevent out of bound\r\n    if (this.getQuestionCount() === this.activeQuestionIdx + 1) return\r\n\r\n    this.setActiveQuestionDone()\r\n    this.setActiveQuestionActive(false)\r\n\r\n    this.activeQuestionIdx++\r\n    this.activeQuiz.questions[this.activeQuestionIdx].active = true\r\n    this.resetTimer()\r\n\r\n    //set jokers active\r\n    this.jokers.forEach((joker) => (joker.used = false))\r\n  }\r\n\r\n  /**\r\n   * Checks if game is over\r\n   * @returns boolean\r\n   */\r\n  private chkGameOver(): boolean {\r\n    return this.getQuestionCount() === this.activeQuestionIdx + 1\r\n  }\r\n\r\n  private wrongAnswerSelected(): void {\r\n    this.endGame()\r\n  }\r\n\r\n  private correctAnswerSelected(): void {\r\n    //save points if secure question level reached or last question was answered correctly\r\n    if (this.getActiveQuestion()?.isSecure || this.chkGameOver()) {\r\n      this.activeQuiz.earnedPoints = this.getActiveQuestion()?.points || 0\r\n    }\r\n\r\n    if (this.chkGameOver()) {\r\n      this.hasWonGame = true\r\n      this.endGame()\r\n    } else {\r\n      this.nextQuestion()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the selection of an answer\r\n   * @param answer\r\n   */\r\n  answerSelected(answer: ActiveAnswer) {\r\n    if (answer.isCorrect) {\r\n      this.correctAnswerSelected()\r\n    } else {\r\n      this.wrongAnswerSelected()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the Timer for the current question\r\n   */\r\n  private startTimer(): void {\r\n    this.secondsRemaining = GAME_CONSTANTS.SECONDS_PER_QUESTION\r\n    const decrementSecondsRemaining = () => {\r\n      if (this.secondsRemaining > 0) {\r\n        runInAction(() => {\r\n          this.secondsRemaining--\r\n          this.secondsElapsed++\r\n        })\r\n      } else {\r\n        this.endGame()\r\n      }\r\n    }\r\n    this.timerId = setInterval(decrementSecondsRemaining, 1000)\r\n  }\r\n\r\n  /**\r\n   * Stops the timer for the current question\r\n   */\r\n  endTimer(): void {\r\n    if (this.timerId) {\r\n      clearInterval(this.timerId)\r\n      this.timerId = undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restarts the Timer (Stop/Start)\r\n   */\r\n  private resetTimer(): void {\r\n    this.endTimer()\r\n    this.startTimer()\r\n  }\r\n\r\n  /**\r\n   * Starts the game with the given Quiz Topic\r\n   * @param quizTopic QuizTopic\r\n   */\r\n  startGame(quizTopic: QuizTopic) {\r\n    this.endTimer()\r\n    this.init()\r\n    this.setActiveQuizTopic(quizTopic)\r\n    this.startTimer()\r\n  }\r\n\r\n  /**\r\n   * Ends the active game\r\n   */\r\n  endGame() {\r\n    this.endTimer()\r\n    this.setActiveQuestionDone()\r\n    this.setWonBadges()\r\n    this.updateUser()\r\n    this.setGameOver()\r\n  }\r\n\r\n  /**\r\n   * Update user:\r\n   * - add earned points\r\n   * - check if level up\r\n   * - update level if necessary\r\n   * - calculate and add won badges\r\n   */\r\n  private updateUser(): void {\r\n    const currentUser = this.rootStore.userStore.getCurrentUser()\r\n    if (!currentUser) return\r\n    currentUser.addPoints(this.getEarnedPoints())\r\n\r\n    //check if level up\r\n    const currentUserLevel = currentUser.level || 0\r\n    currentUser.updateLevel()\r\n    if (currentUser.level > currentUserLevel) {\r\n      this.hasLevelUp = true\r\n      currentUser.levelUp()\r\n    }\r\n    currentUser.increaseGamesPlayedCount()\r\n\r\n    if (this.hasWonGame) {\r\n      currentUser.addCompletedQuizTopic(this.activeQuiz.quizTopicId)\r\n      currentUser.addBadges(this.wonBadges)\r\n    }\r\n    currentUser.Update()\r\n  }\r\n\r\n  /**\r\n   * Method must run for all Jokers\r\n   * @param joker\r\n   */\r\n  runForAllJoker(joker: JokerType): void {\r\n    const currentUser = this.rootStore.userStore.getCurrentUser()\r\n    if (!currentUser) return\r\n\r\n    this.jokerUsed = true\r\n    joker.used = true\r\n    currentUser.useJoker(joker.type)\r\n    joker.count -= 1\r\n  }\r\n\r\n  /**\r\n   * Activation of 50:50 joker. Removes two wrong answers of the active question\r\n   */\r\n  run5050Joker(joker: JokerType): void {\r\n    if (joker.count === 0) {\r\n      return\r\n    }\r\n    const activeQuestion = this.getActiveQuestion()\r\n    if (!activeQuestion) return\r\n\r\n    this.runForAllJoker(joker)\r\n\r\n    //search for idx of wrong answers\r\n    const wrongAnswersIdx: number[] = []\r\n    activeQuestion.answers.forEach((answer, i) => {\r\n      if (!answer.isCorrect) wrongAnswersIdx.push(i)\r\n    })\r\n    const toRemove = sampleSize(wrongAnswersIdx, 2) // random pick of two wrong answers\r\n    pullAt(activeQuestion.answers, toRemove) // remove the picked wrong answers\r\n  }\r\n\r\n  /**\r\n   * Activation of Time Stop joker. Stop the timer for this question\r\n   */\r\n  runTimerStopJoker(joker: JokerType): void {\r\n    if (joker.count === 0) {\r\n      return\r\n    }\r\n\r\n    const currentUser = this.rootStore.userStore.getCurrentUser()\r\n    if (!currentUser) return\r\n    this.runForAllJoker(joker)\r\n\r\n    this.endTimer()\r\n  }\r\n\r\n  /**\r\n   * Initialization of Joker List\r\n   */\r\n  private initJokers() {\r\n    this.jokers.forEach((joker) => {\r\n      switch (joker.type) {\r\n        case JOKER.JOKER_5050:\r\n          joker.run = () => this.run5050Joker(joker)\r\n          break\r\n        case JOKER.JOKER_TIMER_STOP:\r\n          joker.run = () => this.runTimerStopJoker(joker)\r\n          break\r\n      }\r\n      // set count based on how many jokers user has\r\n      joker.count = this.rootStore.userStore.getCurrentUser()?.getJokerCount(joker.type) || 0\r\n    })\r\n  }\r\n\r\n  /**\r\n   * checks which badges the user won and sets these badges in the store\r\n   */\r\n  private setWonBadges() {\r\n    const wonBadges: BadgeType[] = []\r\n    const currentUser = this.rootStore.userStore.getCurrentUser()\r\n    if (!currentUser) return\r\n\r\n    // Won Games Badges\r\n    if (this.hasWonGame) {\r\n      switch (currentUser.gamesPlayedCount) {\r\n        case 1:\r\n          wonBadges.push(getBadge(BADGES.BADGE_WON_GAME_1))\r\n          break\r\n        case 5:\r\n          wonBadges.push(getBadge(BADGES.BADGE_WON_GAME_5))\r\n          break\r\n        case 10:\r\n          wonBadges.push(getBadge(BADGES.BADGE_WON_GAME_10))\r\n          break\r\n      }\r\n    }\r\n    // Won Game without Joker\r\n    if (this.hasWonGame && !this.jokerUsed) {\r\n      wonBadges.push(getBadge(BADGES.BADGE_NO_JOKER))\r\n    }\r\n\r\n    // Won Game in Time\r\n    if (this.hasWonGame) {\r\n      if (this.secondsElapsed < 5 * 60) wonBadges.push(getBadge(BADGES.BADGE_WON_TIME_5))\r\n      if (this.secondsElapsed < 2 * 60) wonBadges.push(getBadge(BADGES.BADGE_WON_TIME_2))\r\n      if (this.secondsElapsed < 60) wonBadges.push(getBadge(BADGES.BADGE_WON_TIME_1))\r\n      if (this.secondsElapsed < 30) wonBadges.push(getBadge(BADGES.BADGE_WON_TIME_30))\r\n    }\r\n\r\n    //filter out already won badges\r\n    const userBadges = currentUser.badges\r\n    let newBadges: BadgeType[] = []\r\n    wonBadges.forEach((badge) => {\r\n      if (\r\n        userBadges.find((userBadge) => {\r\n          return userBadge === badge.type\r\n        }) === undefined\r\n      ) {\r\n        newBadges.push(badge)\r\n      }\r\n    })\r\n\r\n    this.wonBadges = newBadges\r\n  }\r\n}\r\n\r\nexport default GameStore\r\n","import React from \"react\"\r\nimport UserStore from \"./userStore\"\r\nimport AuthStore from \"./authStore\"\r\nimport QuizStore from \"./quizStore\"\r\nimport GameStore from \"./gameStore\"\r\n\r\n/**\r\n * RootStore which holds all other stores (bidirectional)\r\n */\r\nclass RootStore {\r\n  authStore: AuthStore\r\n  userStore: UserStore\r\n  quizStore: QuizStore\r\n  gameStore: GameStore\r\n\r\n  constructor() {\r\n    this.authStore = new AuthStore(this)\r\n    this.userStore = new UserStore(this)\r\n    this.quizStore = new QuizStore(this)\r\n    this.gameStore = new GameStore(this)\r\n  }\r\n}\r\n\r\nconst StoresContext: React.Context<RootStore> = React.createContext(new RootStore())\r\nexport const useStores = () => React.useContext(StoresContext)\r\nexport { RootStore }\r\n","import { ROLES } from \"./roles\"\r\n\r\n//MUI\r\nimport HomeIcon from \"@mui/icons-material/Home\"\r\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\"\r\nimport LoginIcon from \"@mui/icons-material/Login\"\r\nimport AddIcon from \"@mui/icons-material/Add\"\r\nimport SportsEsportsIcon from \"@mui/icons-material/SportsEsports\"\r\nimport LeaderboardIcon from \"@mui/icons-material/Leaderboard\"\r\nimport EmojiEventsIcon from \"@mui/icons-material/EmojiEvents\"\r\nimport { OverridableComponent } from \"@mui/material/OverridableComponent\"\r\nimport { SvgIconTypeMap } from \"@mui/material/SvgIcon\"\r\n\r\nexport const LANDING: string = \"/\"\r\nexport const SIGN_UP: string = \"/signup\"\r\nexport const SIGN_IN: string = \"/signin\"\r\nexport const ACCOUNT: string = \"/account\"\r\nexport const CREATE_QUIZ: string = \"/create-quiz\"\r\nexport const CREATE_QUIZ_FORM: string = \"/create-quiz-form\"\r\nexport const PLAY_GAME: string = \"/play-game\"\r\nexport const PASSWORD_FORGET: string = \"/pw-forget\"\r\nexport const LEADERBOARD: string = \"leaderboard\"\r\nexport const ACHIEVEMENTS: string = \"achievements\"\r\n\r\ninterface Route {\r\n  to: string\r\n  name: string\r\n  role?: ROLES\r\n  Icon: OverridableComponent<SvgIconTypeMap<{}, \"svg\">> & {\r\n    muiName: string\r\n  }\r\n}\r\n\r\nconst nonAuthRoutes: Route[] = [\r\n  {\r\n    to: LANDING,\r\n    name: \"Home\",\r\n    Icon: HomeIcon,\r\n  },\r\n  {\r\n    to: SIGN_UP,\r\n    name: \"Sign Up\",\r\n    Icon: PersonAddIcon,\r\n  },\r\n  {\r\n    to: SIGN_IN,\r\n    name: \"Sign In\",\r\n    Icon: LoginIcon,\r\n  },\r\n]\r\n\r\nconst authRoutes: Route[] = [\r\n  {\r\n    to: LANDING,\r\n    name: \"Home\",\r\n    Icon: HomeIcon,\r\n  },\r\n  {\r\n    to: CREATE_QUIZ,\r\n    name: \"Create Quiz\",\r\n    role: ROLES.TEACHER,\r\n    Icon: AddIcon,\r\n  },\r\n  {\r\n    to: PLAY_GAME,\r\n    name: \"Play\",\r\n    role: ROLES.STUDENT,\r\n    Icon: SportsEsportsIcon,\r\n  },\r\n  {\r\n    to: LEADERBOARD,\r\n    name: \"Leaderboard\",\r\n    Icon: LeaderboardIcon,\r\n  },\r\n  {\r\n    to: ACHIEVEMENTS,\r\n    name: \"Achievements\",\r\n    role: ROLES.STUDENT,\r\n    Icon: EmojiEventsIcon,\r\n  },\r\n]\r\n\r\nexport const routes = { nonAuthRoutes, authRoutes }\r\n","import { useEffect, useState } from \"react\"\r\n\r\n/**\r\n * Hook to load an image. Returns loading, error and image information\r\n * @param fileName string\r\n * @returns Object {loading: boolean, error: any, image: string}\r\n */\r\nconst useImage = (fileName: string) => {\r\n  const [loading, setLoading] = useState<boolean>(true)\r\n  const [error, setError] = useState<any>(null)\r\n  const [image, setImage] = useState<string>(\"\")\r\n\r\n  useEffect(() => {\r\n    const fetchImage = async () => {\r\n      try {\r\n        const response = await import(`../images/${fileName}`)\r\n        setImage(response.default)\r\n      } catch (err) {\r\n        setError(err)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchImage()\r\n  }, [fileName])\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    image,\r\n  }\r\n}\r\n\r\nexport default useImage\r\n","import useImage from \"../../hooks/useImage\"\r\nimport Typography from \"@mui/material/Typography\"\r\n\r\ninterface ImageProps {\r\n  fileName: string\r\n  alt?: string\r\n  className?: string\r\n}\r\nconst Image = ({ fileName, alt, className, ...rest }: ImageProps) => {\r\n  const { loading, error, image } = useImage(fileName)\r\n\r\n  if (error) return <Typography>{alt}</Typography>\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Typography>loading...</Typography>\r\n      ) : (\r\n        <img className={`Image${className ? className.padStart(className.length + 1) : \"\"}`} src={image} alt={alt} {...rest} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { useState } from \"react\"\r\nimport { NavLink, useNavigate, Link } from \"react-router-dom\"\r\nimport { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\nimport Image from \"../General/Image\"\r\n\r\n//Material-UI\r\nimport AppBar from \"@mui/material/AppBar\"\r\nimport Box from \"@mui/material/Box\"\r\nimport Toolbar from \"@mui/material/Toolbar\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport IconButton from \"@mui/material/IconButton\"\r\nimport MenuItem from \"@mui/material/MenuItem\"\r\nimport Menu from \"@mui/material/Menu\"\r\nimport Container from \"@mui/material/Container\"\r\nimport Button from \"@mui/material/Button\"\r\nimport AccountCircle from \"@mui/icons-material/AccountCircle\"\r\nimport MenuIcon from \"@mui/icons-material/Menu\"\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\"\r\nimport PersonIcon from \"@mui/icons-material/Person\"\r\nimport SettingsIcon from \"@mui/icons-material/Settings\"\r\nimport LogoutIcon from \"@mui/icons-material/Logout\"\r\n\r\n//constants\r\nimport { routes } from \"../../constants/routes\"\r\n\r\ninterface NavMenuButtonProps {\r\n  name: string\r\n  Icon: any\r\n}\r\nconst NavMenuButton = ({ name, Icon }: NavMenuButtonProps) => {\r\n  return (\r\n    <Button sx={{ my: 2, color: \"white\", mr: 2 }} startIcon={<Icon />}>\r\n      {name}\r\n    </Button>\r\n  )\r\n} //, display: \"block\"\r\n\r\nconst AppBarNonAuth = () => (\r\n  <Box sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"flex\" } }}>\r\n    {routes.nonAuthRoutes.map((page) => (\r\n      <NavLink to={page.to} key={page.to} style={{ textDecoration: \"none\" }}>\r\n        <NavMenuButton name={page.name} Icon={page.Icon} />\r\n      </NavLink>\r\n    ))}\r\n  </Box>\r\n)\r\n\r\nconst AppBarAuth = observer(() => {\r\n  const { userStore, authStore } = useStores()\r\n  const [anchorElUser, setAnchorElUser] = useState<null | HTMLElement>(null)\r\n  const [anchorElNav, setAnchorElNav] = useState<null | HTMLElement>(null)\r\n\r\n  const currentUser = userStore.getCurrentUser()\r\n  const navigate = useNavigate()\r\n\r\n  const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElUser(event.currentTarget)\r\n  }\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null)\r\n  }\r\n\r\n  const handleSignOut = () => {\r\n    authStore.doSignOut().then(() => navigate(ROUTES.LANDING))\r\n    handleCloseUserMenu()\r\n  }\r\n\r\n  const handleAccountClick = () => {\r\n    navigate(ROUTES.ACCOUNT)\r\n    handleCloseUserMenu()\r\n  }\r\n\r\n  const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElNav(event.currentTarget)\r\n  }\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Tablet/Desktop  AppBar */}\r\n      <Box sx={{ flexGrow: 1, display: { xs: \"none\", sm: \"flex\" } }}>\r\n        {routes.authRoutes.map(\r\n          (page, i) =>\r\n            (currentUser?.role === page.role || !page.role) && (\r\n              <NavLink to={page.to} key={i} style={{ textDecoration: \"none\" }}>\r\n                <NavMenuButton name={page.name} Icon={page.Icon} />\r\n              </NavLink>\r\n            )\r\n        )}\r\n      </Box>\r\n      {/* Mobile AppBar */}\r\n      <Box sx={{ flexGrow: 1, display: { xs: \"flex\", sm: \"none\" } }}>\r\n        <IconButton\r\n          size=\"large\"\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"menu-appbar\"\r\n          aria-haspopup=\"true\"\r\n          onClick={handleOpenNavMenu}\r\n          color=\"inherit\"\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Menu\r\n          id=\"menu-appbar\"\r\n          anchorEl={anchorElNav}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\",\r\n          }}\r\n          keepMounted\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"left\",\r\n          }}\r\n          open={Boolean(anchorElNav)}\r\n          onClose={handleCloseNavMenu}\r\n          sx={{\r\n            display: { xs: \"block\", md: \"none\" },\r\n          }}\r\n        >\r\n          {routes.authRoutes.map(\r\n            (page, i) =>\r\n              (currentUser?.role === page.role || !page.role) && (\r\n                <MenuItem key={i} component={Link} to={page.to} onClick={handleCloseNavMenu}>\r\n                  <ListItemIcon>\r\n                    <page.Icon />\r\n                  </ListItemIcon>\r\n                  <Typography>{page.name}</Typography>\r\n                </MenuItem>\r\n              )\r\n          )}\r\n        </Menu>\r\n      </Box>\r\n\r\n      {/* User Icon Menu on right for mobile and desktop*/}\r\n      <Box sx={{ flexGrow: 0 }}>\r\n        <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <Menu\r\n          sx={{ mt: \"45px\" }}\r\n          id=\"menu-appbar\"\r\n          anchorEl={anchorElUser}\r\n          anchorOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"right\",\r\n          }}\r\n          keepMounted\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"right\",\r\n          }}\r\n          open={Boolean(anchorElUser)}\r\n          onClose={handleCloseUserMenu}\r\n        >\r\n          <MenuItem key=\"1\" divider>\r\n            <ListItemIcon>\r\n              <PersonIcon />\r\n            </ListItemIcon>\r\n            <Typography>{currentUser?.getName()}</Typography>\r\n          </MenuItem>\r\n          <MenuItem key=\"2\" divider onClick={handleAccountClick}>\r\n            <ListItemIcon>\r\n              <SettingsIcon />\r\n            </ListItemIcon>\r\n            <Typography>Account</Typography>\r\n          </MenuItem>\r\n          <MenuItem key=\"3\" onClick={handleSignOut}>\r\n            <ListItemIcon>\r\n              <LogoutIcon />\r\n            </ListItemIcon>\r\n            <Typography>Sign Out</Typography>\r\n          </MenuItem>\r\n        </Menu>\r\n      </Box>\r\n    </>\r\n  )\r\n})\r\n\r\nconst ResponsiveAppBar = observer(() => {\r\n  const { authStore } = useStores()\r\n  const isAuth = authStore.isAuthenticated()\r\n\r\n  return (\r\n    <AppBar position=\"sticky\">\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <Typography variant=\"h6\" noWrap component=\"div\" sx={{ mr: 2, maxWidth: \"50px\", display: { xs: \"none\", md: \"flex\" } }}>\r\n            <Image fileName=\"wer_wird_millionar_icon.png\" alt={\"Logo\"} />\r\n          </Typography>\r\n\r\n          {isAuth ? <AppBarAuth /> : <AppBarNonAuth />}\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  )\r\n})\r\n\r\nexport default ResponsiveAppBar\r\n","import Typography from \"@mui/material/Typography\"\r\n\r\ntype Props = {\r\n  title: string\r\n}\r\nexport default function Header({ title }: Props) {\r\n  return (\r\n    <Typography variant=\"h2\" component=\"div\" gutterBottom>\r\n      {title}\r\n    </Typography>\r\n  )\r\n}\r\n","import Header from \"../App/Header\"\r\nimport { Link } from \"react-router-dom\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\n\r\n//MUI\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Card from \"@mui/material/Card\"\r\nimport CardContent from \"@mui/material/CardContent\"\r\nimport Stack from \"@mui/material/Stack\"\r\n\r\nexport default function Landing() {\r\n  return (\r\n    <>\r\n      <Header title=\"Welcome\" />\r\n      <Stack spacing={2}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h3\">\r\n              Spielbeschreibung\r\n            </Typography>\r\n\r\n            <Typography variant=\"body1\">\r\n              Dir wird eine Frage präsentiert zu welcher es vier mögliche Antworten gibt. Wenn du eine Antwort auswählst, siehst\r\n              du, ob du korrekt geantwortet hast. Wurde die korrekte Antwort gewählt, so erhälst du die nächste Frage. Wenn du\r\n              aber eine falsche Antwort auswählt, so ist das Spiel beendet und du hast verloren. Das Ziel ist es, alle Fragen\r\n              korrekt zu beantworten. Es werden dir maximal 15 Fragen gestellt, welche du alle korrekt beantworten musst, um zu\r\n              gewinnen. Mit jeder korrekt beantworteten Frage erhälst du einen Gewinn in Punkteform. Sollte jedoch eine Frage\r\n              falsch beantwortet werden, so fällst du auf die letzte Sicherheitsstufe zurück. Bei der Sicherheitsstufe handelt es\r\n              sich um eine Absicherung für dich. Wenn eine Sicherheitsstufe überschritten wurde, so wirst du selbst beim Verlieren\r\n              des Spiels den gesicherten Punktestand erhalten. Für die Beantwortung einer Frage bleiben dir maximal 40 Sekunden.\r\n              Dir stehen während dem Spiel zwei Arten von Joker zur Verfügung. Wie viele der Joker du einsetzen kannst, hängt\r\n              davon ab, wie viele Joker du dir bereits erspielt hast.\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h3\">\r\n              Themengebiete\r\n            </Typography>\r\n\r\n            <Typography variant=\"body1\">\r\n              Die zur Verfügung stehenden Themengebiete zum Spielen werden von deiner Lehrperson erstellt. Du kannst ein\r\n              Themengebiet so oft wie du willst wiederholen. Hast du es aber einmal komplett erfolgreich beendet, kannst du es\r\n              nicht mehr wiederholen.\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h3\">\r\n              Joker\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" component=\"div\">\r\n              50 : 50\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              Es werden dir zwei zufällige falsche Antworten entfernt und du kannst noch aus zwei Antworten auswählen.\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" component=\"div\">\r\n              Timer Stopp\r\n            </Typography>\r\n            <Typography variant=\"body1\">Die Zeit wird angehalten und du kannst die Frage in Ruhe beantworten.</Typography>\r\n            <Typography variant=\"body1\" sx={{ mt: 1 }}>\r\n              Aber Achtung: Der Einsatz eines Jokers führt zu einem Punktabzug von 1/4 deiner Gewinnsumme.\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h3\">\r\n              Level\r\n            </Typography>\r\n\r\n            <Typography variant=\"body1\">\r\n              Durch das erspielen von Punkten kannst du ein höheres Level erreichen. Für jedes Level werden 1 Million Punkte\r\n              benötigt. Das Erreichen eines neuen Level lohnt sich für dich, denn so erhälst du einen neuen \"50:50\" und \"Timer\r\n              Stopp\" Joker. Dein aktuelles Level und dein Punktestand kannst du in den den{\" \"}\r\n              <Link to={ROUTES.ACHIEVEMENTS}>Achievements</Link> einsehen.\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h3\">\r\n              Abzeichen\r\n            </Typography>\r\n\r\n            <Typography variant=\"body1\">\r\n              Für besonders gute Leistungen kannst du verschiedene Abzeichen erhalten. Welche Abzeichen du bereits erspielt hast\r\n              und welche noch nicht, kannst du in den <Link to={ROUTES.ACHIEVEMENTS}>Achievements</Link> einsehen.\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Stack>\r\n    </>\r\n  )\r\n}\r\n","import { useState } from \"react\"\r\nimport { useNavigate, Link } from \"react-router-dom\"\r\nimport { useStores } from \"../../stores\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\nimport { FIREBASE_ERRORS } from \"../../constants/firebase\"\r\nimport * as yup from \"yup\"\r\nimport { useFormik } from \"formik\"\r\n\r\n// Material-UI\r\nimport Alert from \"@mui/material/Alert\"\r\nimport TextField from \"@mui/material/TextField\"\r\nimport Button from \"@mui/material/Button\"\r\nimport Container from \"@mui/material/Container/Container\"\r\nimport Avatar from \"@mui/material/Avatar\"\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Box from \"@mui/material/Box\"\r\nimport Grid from \"@mui/material/Grid\"\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\"\r\nimport Switch from \"@mui/material/Switch\"\r\n\r\ninterface FormValues {\r\n  firstname: string\r\n  lastname: string\r\n  email: string\r\n  password: string\r\n  isTeacher: boolean\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n  firstname: yup.string().required(\"First Name is required\"),\r\n  lastname: yup.string().required(\"Last Name is required\"),\r\n  email: yup.string().email(\"Enter a valid email\").required(\"Email is required\"),\r\n  password: yup.string().min(8, \"Password should be of minimum 8 characters length\").required(\"Password is required\"),\r\n})\r\n\r\nconst SignUpForm = () => {\r\n  const { authStore } = useStores()\r\n  const navigate = useNavigate()\r\n  const [error, setError] = useState<string>()\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n  const onFinish = (values: FormValues) => {\r\n    setIsLoading(true)\r\n\r\n    authStore\r\n      .doCreateUserWithEmailAndPassword(values.firstname, values.lastname, values.email, values.password, values.isTeacher)\r\n      .then(() => {\r\n        navigate(ROUTES.LANDING)\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message)\r\n        setError(FIREBASE_ERRORS[error.code] || \"Unexpected Error\")\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false)\r\n      })\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      firstname: \"\",\r\n      lastname: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      isTeacher: false,\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values: FormValues) => {\r\n      onFinish(values)\r\n    },\r\n  })\r\n\r\n  return (\r\n    <Box component=\"form\" onSubmit={formik.handleSubmit} noValidate sx={{ mt: 2 }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"firstname\"\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            autoFocus\r\n            autoComplete=\"given-name\"\r\n            value={formik.values.firstname}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.firstname && Boolean(formik.errors.firstname)}\r\n            helperText={formik.touched.firstname && formik.errors.firstname}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"lastname\"\r\n            label=\"Last Name\"\r\n            name=\"lastname\"\r\n            autoComplete=\"family-name\"\r\n            value={formik.values.lastname}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.lastname && Boolean(formik.errors.lastname)}\r\n            helperText={formik.touched.lastname && formik.errors.lastname}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"email\"\r\n            name=\"email\"\r\n            label=\"Email\"\r\n            autoComplete=\"email\"\r\n            value={formik.values.email}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.email && Boolean(formik.errors.email)}\r\n            helperText={formik.touched.email && formik.errors.email}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"password\"\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={formik.values.password}\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.password && Boolean(formik.errors.password)}\r\n            helperText={formik.touched.password && formik.errors.password}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlLabel\r\n            control={<Switch id=\"isTeacher\" value={formik.values.isTeacher} onChange={formik.handleChange} />}\r\n            label=\"I am a teacher\"\r\n          />\r\n        </Grid>{\" \"}\r\n      </Grid>\r\n      <Button sx={{ mt: 2, mb: 2 }} color=\"primary\" variant=\"contained\" fullWidth type=\"submit\" disabled={isLoading}>\r\n        SIGN UP\r\n      </Button>\r\n      <Link to={ROUTES.SIGN_IN}>Already have an account? Sign In</Link>\r\n      {error && <Alert severity=\"error\">{error}</Alert>}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default function SignUp() {\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n        <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <SignUpForm />\r\n      </Box>\r\n    </Container>\r\n  )\r\n}\r\n","import { useState } from \"react\"\r\nimport { useNavigate, Link } from \"react-router-dom\"\r\nimport { useStores } from \"../../stores\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\nimport { FIREBASE_ERRORS } from \"../../constants/firebase\"\r\nimport { useFormik } from \"formik\"\r\nimport * as yup from \"yup\"\r\n\r\n// Material-UI\r\nimport Alert from \"@mui/material/Alert\"\r\nimport TextField from \"@mui/material/TextField\"\r\nimport Button from \"@mui/material/Button\"\r\nimport Container from \"@mui/material/Container/Container\"\r\nimport Avatar from \"@mui/material/Avatar\"\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Box from \"@mui/material/Box\"\r\n\r\ninterface FormValues {\r\n  email: string\r\n  password: string\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup.string().email(\"Enter a valid email\").required(\"Email is required\"),\r\n  password: yup.string().min(8, \"Password should be of minimum 8 characters length\").required(\"Password is required\"),\r\n})\r\n\r\nconst SignInForm = () => {\r\n  const { authStore } = useStores()\r\n  const navigate = useNavigate()\r\n  const [error, setError] = useState<string>()\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n  const onFinish = (values: FormValues) => {\r\n    setIsLoading(true)\r\n\r\n    authStore\r\n      .doSignInWithEmailAndPassword(values.email, values.password)\r\n      .then((authUser) => {\r\n        navigate(ROUTES.LANDING)\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message)\r\n        setError(FIREBASE_ERRORS[error.code] || \"Unexpected Error\")\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false)\r\n      })\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values: FormValues) => {\r\n      onFinish(values)\r\n    },\r\n  })\r\n\r\n  return (\r\n    <Box component=\"form\" onSubmit={formik.handleSubmit} noValidate sx={{ mt: 1 }}>\r\n      <TextField\r\n        fullWidth\r\n        margin=\"normal\"\r\n        id=\"email\"\r\n        name=\"email\"\r\n        label=\"Email\"\r\n        autoComplete=\"email\"\r\n        autoFocus\r\n        value={formik.values.email}\r\n        onChange={formik.handleChange}\r\n        error={formik.touched.email && Boolean(formik.errors.email)}\r\n        helperText={formik.touched.email && formik.errors.email}\r\n      />\r\n      <TextField\r\n        fullWidth\r\n        margin=\"normal\"\r\n        id=\"password\"\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        type=\"password\"\r\n        autoComplete=\"current-password\"\r\n        value={formik.values.password}\r\n        onChange={formik.handleChange}\r\n        error={formik.touched.password && Boolean(formik.errors.password)}\r\n        helperText={formik.touched.password && formik.errors.password}\r\n      />\r\n      <Button sx={{ mt: 3, mb: 2 }} color=\"primary\" variant=\"contained\" fullWidth type=\"submit\" disabled={isLoading}>\r\n        SIGN IN\r\n      </Button>\r\n      <Link to={ROUTES.SIGN_UP}>Don't have an account? Sign Up</Link>\r\n      {error && <Alert severity=\"error\">{error}</Alert>}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default function SignIn() {\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n        <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <SignInForm />\r\n      </Box>\r\n    </Container>\r\n  )\r\n}\r\n","import Header from \"../App/Header\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\nimport { useStores } from \"../../stores\"\r\nimport QuizTopic from \"../../model/QuizTopic\"\r\n\r\n// MUI\r\nimport TextField from \"@mui/material/TextField\"\r\nimport Grid from \"@mui/material/Grid\"\r\nimport Fab from \"@mui/material/Fab\"\r\nimport AddIcon from \"@mui/icons-material/Add\"\r\nimport List from \"@mui/material/List\"\r\nimport ListItem from \"@mui/material/ListItem\"\r\nimport ListItemButton from \"@mui/material/ListItemButton\"\r\nimport EditIcon from \"@mui/icons-material/Edit\"\r\nimport IconButton from \"@mui/material/IconButton\"\r\nimport ListItemText from \"@mui/material/ListItemText\"\r\nimport Divider from \"@mui/material/Divider\"\r\nimport Stack from \"@mui/material/Stack\"\r\n\r\nconst CreateQuizTopic = () => {\r\n  const [topicName, setTopicName] = useState<string>(\"\")\r\n  const { quizStore } = useStores()\r\n  const navigate = useNavigate()\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTopicName(event.target.value)\r\n  }\r\n\r\n  const handleAddClick = () => {\r\n    quizStore.setNewQuizTopic(topicName)\r\n    setTopicName(\"\")\r\n    navigate(ROUTES.CREATE_QUIZ_FORM)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Divider textAlign=\"left\">Create new Quiz</Divider>\r\n      <Grid container>\r\n        <Grid item xs={10} sm={11}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"newTopicName\"\r\n            label=\"Topic name\"\r\n            variant=\"outlined\"\r\n            value={topicName}\r\n            onChange={handleInputChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2} sm={1}>\r\n          <Fab\r\n            sx={{ ml: \"10px\" }}\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            onClick={handleAddClick}\r\n            disabled={topicName.length === 0}\r\n          >\r\n            <AddIcon />\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nconst QuizTopicList = observer(() => {\r\n  const { quizStore } = useStores()\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    quizStore.pullAllQuizTopicsOfUser()\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const allQuizTopics = quizStore.getAllQuizTopics()\r\n\r\n  const handleEditClick = (quizTopic: QuizTopic): void => {\r\n    quizStore.editQuizTopic(quizTopic)\r\n    navigate(ROUTES.CREATE_QUIZ_FORM)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Divider textAlign=\"left\">Edit your Quiz</Divider>\r\n      <List>\r\n        {allQuizTopics?.map((quizTopic, i) => (\r\n          <ListItem\r\n            disablePadding\r\n            key={i}\r\n            secondaryAction={\r\n              <IconButton edge=\"end\" aria-label=\"edit\" onClick={() => handleEditClick(quizTopic)}>\r\n                <EditIcon />\r\n              </IconButton>\r\n            }\r\n          >\r\n            <ListItemButton>\r\n              <ListItemText primary={quizTopic.name} secondary={!quizTopic.isActive && \"Deactivated\"} />\r\n            </ListItemButton>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default function CreateQuiz() {\r\n  return (\r\n    <>\r\n      <Header title=\"Create Quiz\" />\r\n      {/* if not role 2 redirect to home */}\r\n      <Stack spacing={2}>\r\n        <CreateQuizTopic />\r\n        <QuizTopicList />\r\n      </Stack>\r\n    </>\r\n  )\r\n}\r\n","import { FbStorage } from \"./firebase\"\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\"\r\n\r\nconst IMAGE_PATH = \"images\"\r\n\r\n/**\r\n * Uploads a file on the server and returns the url to the file\r\n * @param file File\r\n * @param path path on server\r\n * @param name name of file on server\r\n * @returns Promise<string> URL of the uploaded file\r\n */\r\nasync function uploadFileToStorage(file: File | null, path: string, name: string): Promise<string> {\r\n  return new Promise<string>(function (resolve, reject) {\r\n    if (!file) return resolve(\"\")\r\n    const metadata = {\r\n      contentType: file.type,\r\n    }\r\n    try {\r\n      const fileRef = ref(FbStorage, `${path}/${name}`)\r\n      const uploadTask = uploadBytesResumable(fileRef, file, metadata)\r\n\r\n      // Listen for state changes, errors, and completion of the upload.\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          // log task progress\r\n          switch (snapshot.state) {\r\n            case \"paused\":\r\n              console.log(\"Upload is paused\")\r\n              break\r\n            case \"running\":\r\n              console.log(\"Upload is running\")\r\n              break\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(\"Error saving file: \", error)\r\n          reject()\r\n        },\r\n        () => {\r\n          // Upload completed successfully, now we can get the download URL\r\n          getDownloadURL(uploadTask.snapshot.ref).then((downloadUrl) => {\r\n            resolve(downloadUrl)\r\n          })\r\n        }\r\n      )\r\n    } catch {\r\n      console.log(\"Error saving file\")\r\n      reject()\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Uploads an image on the server and returns the url to the file\r\n * @param image File\r\n * @param name name on the server\r\n * @returns Promise<string>\r\n */\r\nasync function uploadImageToStorage(image: File | null, name: string): Promise<string> {\r\n  return await uploadFileToStorage(image, IMAGE_PATH, name)\r\n}\r\n\r\nexport { uploadImageToStorage }\r\n","import { useState } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\nimport { Question } from \"../../model/Quiz\"\r\nimport { useNavigate, Link } from \"react-router-dom\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\nimport { last } from \"lodash\"\r\nimport { uploadImageToStorage } from \"../../storage/fileStorage\"\r\n//MUI\r\nimport TextField from \"@mui/material/TextField\"\r\nimport Box from \"@mui/material/Box\"\r\nimport Card from \"@mui/material/Card\"\r\nimport CardContent from \"@mui/material/CardContent\"\r\nimport Grid from \"@mui/material/Grid\"\r\nimport Fab from \"@mui/material/Fab\"\r\nimport Button from \"@mui/material/Button\"\r\nimport AddIcon from \"@mui/icons-material/Add\"\r\nimport Accordion from \"@mui/material/Accordion\"\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\"\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\"\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\"\r\nimport CircularProgress from \"@mui/material/CircularProgress\"\r\nimport DeleteIcon from \"@mui/icons-material/Delete\"\r\nimport IconButton from \"@mui/material/IconButton\"\r\nimport FormGroup from \"@mui/material/FormGroup\"\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\"\r\nimport Switch from \"@mui/material/Switch\"\r\nimport Alert from \"@mui/material/Alert\"\r\n\r\ntype QuizItemImageProps = {\r\n  id: number\r\n  quizId: string\r\n  handleChangeImageUrl: any\r\n  imageUrl: string\r\n}\r\n\r\nconst QuizItemImage = observer(({ id, quizId, handleChangeImageUrl, imageUrl }: QuizItemImageProps) => {\r\n  const [imageUploadLoading, setImageUploadLoading] = useState<boolean>(false)\r\n  const [imageUploadError, setImageUploadError] = useState<string>(\"\")\r\n\r\n  const uploadImage = (image: File) => {\r\n    if (!image) return\r\n    setImageUploadLoading(true)\r\n    const name = `imageQuestion-${quizId}-${id}`\r\n    uploadImageToStorage(image, name)\r\n      .then((url) => {\r\n        handleChangeImageUrl.bind(id)(url) // bind id to function and call with parameter url\r\n        setImageUploadLoading(false)\r\n        setImageUploadError(\"\")\r\n      })\r\n      .catch(() => {\r\n        setImageUploadError(\"Error uploading image!\")\r\n        setImageUploadLoading(false)\r\n      })\r\n  }\r\n\r\n  const onImageChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    if (!e) return\r\n    if (!e.currentTarget.files) return\r\n\r\n    const reader = new FileReader()\r\n    let file = e.currentTarget.files[0] // get the supplied file\r\n    // if there is a file, set image to that file\r\n    if (file) {\r\n      reader.onload = () => {\r\n        if (reader.readyState === FileReader.DONE) {\r\n          uploadImage(file)\r\n        }\r\n      }\r\n      reader.readAsDataURL(e.currentTarget.files[0])\r\n    }\r\n  }\r\n\r\n  const onDeleteClick = () => {\r\n    handleChangeImageUrl.bind(id)(\"\") //set empty url\r\n    setImageUploadError(\"\")\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Typography>Question Image (optional)</Typography>\r\n\r\n      {imageUrl ? (\r\n        <>\r\n          <Button variant=\"text\" startIcon={<DeleteIcon />} onClick={onDeleteClick}>\r\n            Delete\r\n          </Button>\r\n          <br />\r\n          <img src={imageUrl} alt=\"Question\" width=\"100\" />\r\n        </>\r\n      ) : (\r\n        <Button variant=\"text\" component=\"label\" color=\"primary\" startIcon={<AddIcon />} disabled={imageUploadLoading}>\r\n          {imageUploadLoading ? \"Uploading...\" : \"Upload\"}\r\n          <input\r\n            type=\"file\"\r\n            hidden\r\n            accept=\"image/x-png,image/jpeg\"\r\n            onChange={(e) => {\r\n              onImageChange(e)\r\n            }}\r\n          />\r\n        </Button>\r\n      )}\r\n\r\n      {imageUploadError && <Alert severity=\"error\">{imageUploadError}</Alert>}\r\n    </>\r\n  )\r\n})\r\n\r\ntype QuizItemProps = {\r\n  id: number\r\n  quizId: string\r\n  question: Question\r\n  handleChangeQuestion: any\r\n  handleChangeCorrectAnswer: any\r\n  handleChangeWrongAnswer1: any\r\n  handleChangeWrongAnswer2: any\r\n  handleChangeWrongAnswer3: any\r\n  handleChangeImageUrl: any\r\n}\r\n\r\nconst QuizItem = observer(\r\n  ({\r\n    id,\r\n    quizId,\r\n    question,\r\n    handleChangeQuestion,\r\n    handleChangeCorrectAnswer,\r\n    handleChangeWrongAnswer1,\r\n    handleChangeWrongAnswer2,\r\n    handleChangeWrongAnswer3,\r\n    handleChangeImageUrl,\r\n  }: QuizItemProps) => {\r\n    const questionLabel: string = \"Question \" + (id + 1)\r\n    const { quizStore } = useStores()\r\n\r\n    const onDeleteClick = () => {\r\n      quizStore.deleteNewQuizQuestion(id)\r\n    }\r\n\r\n    return (\r\n      <Accordion>\r\n        <AccordionSummary\r\n          sx={{ alignItems: \"center\" }}\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography sx={{ minWidth: \"100px\", flexShrink: 0 }}>{questionLabel}</Typography>\r\n          <Typography sx={{ color: \"text.secondary\" }}>{question.text}</Typography>\r\n          {id > 0 && (\r\n            <IconButton sx={{ ml: \"auto\", mr: 5 }} aria-label=\"delete\" onClick={onDeleteClick}>\r\n              <DeleteIcon fontSize=\"inherit\" color=\"error\" />\r\n            </IconButton>\r\n          )}\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Card variant=\"outlined\" sx={{ mb: 2 }}>\r\n            <CardContent>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    required\r\n                    id=\"question1\"\r\n                    name=\"question1\"\r\n                    label={questionLabel}\r\n                    size=\"small\"\r\n                    value={question.text}\r\n                    onChange={handleChangeQuestion.bind(id)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    required\r\n                    id=\"correctAnswer\"\r\n                    name=\"correctAnswer\"\r\n                    label=\"Correct Answer\"\r\n                    size=\"small\"\r\n                    value={question.correctAnswer}\r\n                    onChange={handleChangeCorrectAnswer.bind(id)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    required\r\n                    id=\"wrongAnswer1\"\r\n                    name=\"wrongAnswer1\"\r\n                    label=\"Wrong Answer 1\"\r\n                    size=\"small\"\r\n                    value={question.wrongAnswer1}\r\n                    onChange={handleChangeWrongAnswer1.bind(id)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    required\r\n                    id=\"wrongAnswer2\"\r\n                    name=\"wrongAnswer2\"\r\n                    label=\"Wrong Answer 2\"\r\n                    size=\"small\"\r\n                    value={question.wrongAnswer2}\r\n                    onChange={handleChangeWrongAnswer2.bind(id)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    required\r\n                    id=\"wrongAnswer3\"\r\n                    name=\"wrongAnswer3\"\r\n                    label=\"Wrong Answer 3\"\r\n                    size=\"small\"\r\n                    value={question.wrongAnswer3}\r\n                    onChange={handleChangeWrongAnswer3.bind(id)}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <QuizItemImage\r\n                    id={id}\r\n                    quizId={quizId}\r\n                    handleChangeImageUrl={handleChangeImageUrl}\r\n                    imageUrl={question.imageUrl}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    )\r\n  }\r\n)\r\n\r\nconst CreateQuizForm = observer(() => {\r\n  const { quizStore } = useStores()\r\n  const navigate = useNavigate()\r\n\r\n  const newQuiz = quizStore.getNewQuiz()\r\n  const newQuizTopic = quizStore.getNewQuizTopic()\r\n\r\n  if (!newQuiz || !newQuizTopic) return <CircularProgress />\r\n\r\n  const handleAddClick = (): void => {\r\n    quizStore.addNewQuizQuestion()\r\n  }\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault() //prevent from reload\r\n    quizStore.submitQuizTopicForm().then(() => navigate(ROUTES.CREATE_QUIZ))\r\n  }\r\n\r\n  function handleChangeQuestion(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    quizStore.setNewQuizQuestionText(this, event.target.value)\r\n  }\r\n  function handleChangeCorrectAnswer(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    quizStore.setNewQuizQuestionCorrectAnswer(this, event.target.value)\r\n  }\r\n  function handleChangeWrongAnswer1(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    quizStore.setNewQuizQuestionWrongAnswer1(this, event.target.value)\r\n  }\r\n  function handleChangeWrongAnswer2(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    quizStore.setNewQuizQuestionWrongAnswer2(this, event.target.value)\r\n  }\r\n  function handleChangeWrongAnswer3(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    quizStore.setNewQuizQuestionWrongAnswer3(this, event.target.value)\r\n  }\r\n  function handleChangeImageUrl(url: string): void {\r\n    quizStore.setNewQuizQuestionImageUrl(this, url)\r\n  }\r\n\r\n  //check if add button should be disabled\r\n  const addDisabled = (): boolean => {\r\n    //maximum allowed questions\r\n    if (newQuiz.questions.length >= 15) return true\r\n\r\n    //last question needs all inputs\r\n    const lastQuestion = last(newQuiz.questions)\r\n    if (!lastQuestion) return false\r\n    if (\r\n      !lastQuestion.text ||\r\n      !lastQuestion.correctAnswer ||\r\n      !lastQuestion.wrongAnswer1 ||\r\n      !lastQuestion.wrongAnswer2 ||\r\n      !lastQuestion.wrongAnswer3\r\n    )\r\n      return true\r\n\r\n    //else allowed\r\n    return false\r\n  }\r\n\r\n  const submitDisabled = (): boolean => {\r\n    // all question need all inputs\r\n    let questionMissingInformation = false\r\n    newQuiz.questions.forEach((question, i) => {\r\n      if (\r\n        !question.text ||\r\n        !question.correctAnswer ||\r\n        !question.wrongAnswer1 ||\r\n        !question.wrongAnswer2 ||\r\n        !question.wrongAnswer3\r\n      ) {\r\n        questionMissingInformation = true\r\n      }\r\n    })\r\n    return questionMissingInformation\r\n  }\r\n\r\n  const createQuizItems = () => {\r\n    return newQuiz?.questions?.map((question, i) => (\r\n      <QuizItem\r\n        key={i}\r\n        id={i}\r\n        quizId={newQuiz.quizId}\r\n        question={question}\r\n        handleChangeQuestion={handleChangeQuestion}\r\n        handleChangeCorrectAnswer={handleChangeCorrectAnswer}\r\n        handleChangeWrongAnswer1={handleChangeWrongAnswer1}\r\n        handleChangeWrongAnswer2={handleChangeWrongAnswer2}\r\n        handleChangeWrongAnswer3={handleChangeWrongAnswer3}\r\n        handleChangeImageUrl={handleChangeImageUrl}\r\n      />\r\n    ))\r\n  }\r\n\r\n  const handleDeactivateTopicChange = () => {\r\n    newQuizTopic.isActive = !newQuizTopic.isActive\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <Link to={ROUTES.CREATE_QUIZ}>Create Quiz</Link>\r\n        <Typography color=\"text.primary\">Enter Questions</Typography>\r\n      </Breadcrumbs>\r\n\r\n      <Box\r\n        component=\"form\"\r\n        onSubmit={handleSubmit}\r\n        noValidate\r\n        sx={{ mt: \"10px\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\r\n      >\r\n        <FormGroup sx={{ mb: 2 }}>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={newQuizTopic.isActive}\r\n                onChange={handleDeactivateTopicChange}\r\n                inputProps={{ \"aria-label\": \"controlled\" }}\r\n                sx={{ mb: 0 }}\r\n              />\r\n            }\r\n            label={newQuizTopic.isActive ? \"Topic active\" : \"Topic inactive\"}\r\n          />\r\n        </FormGroup>\r\n        {createQuizItems()}\r\n        <Fab sx={{ mt: 3 }} size=\"medium\" color=\"primary\" aria-label=\"add\" onClick={handleAddClick} disabled={addDisabled()}>\r\n          <AddIcon />\r\n        </Fab>\r\n        <Button sx={{ ml: \"auto\" }} color=\"primary\" variant=\"contained\" type=\"submit\" disabled={submitDisabled()}>\r\n          Save and exit\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default CreateQuizForm\r\n","import { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\nimport { ActiveQuestion } from \"../../stores/gameStore\"\r\n\r\n// MUI\r\nimport List from \"@mui/material/List\"\r\nimport ListItem from \"@mui/material/ListItem\"\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\"\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\"\r\nimport ListItemText from \"@mui/material/ListItemText\"\r\nimport HelpIcon from \"@mui/icons-material/Help\"\r\nimport HealthAndSafetyIcon from \"@mui/icons-material/HealthAndSafety\"\r\n\r\ninterface QuestionListItemProps {\r\n  question: ActiveQuestion\r\n}\r\n\r\nconst QuestionListItem = observer((props: QuestionListItemProps) => {\r\n  let icon: any\r\n  const question = props.question\r\n  const style = {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: \"10px\",\r\n    color: \"#000\",\r\n    paddingLeft: \"10px\",\r\n  }\r\n\r\n  if (question.active) {\r\n    icon = question.isSecure ? <HealthAndSafetyIcon color=\"warning\" /> : <HelpIcon color=\"disabled\" />\r\n    style.backgroundColor = \"#e8f5e9\"\r\n  } else {\r\n    if (question.done) {\r\n      icon = question.isSecure ? <HealthAndSafetyIcon color=\"success\" /> : <CheckCircleIcon color=\"success\" />\r\n    } else {\r\n      if (question.isSecure) {\r\n        icon = <HealthAndSafetyIcon color=\"warning\" />\r\n        style.color = \"#ed6c02\"\r\n      } else {\r\n        icon = <HelpIcon color=\"disabled\" />\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ListItem disablePadding style={style}>\r\n      <ListItemIcon>{icon}</ListItemIcon>\r\n      <ListItemText primary={`${question.level} - ${question.points.toLocaleString(\"en\")}`} sx={{ mr: 1 }} />\r\n    </ListItem>\r\n  )\r\n})\r\n\r\nconst QuestionList = observer(() => {\r\n  const { gameStore } = useStores()\r\n  const activeQuiz = gameStore.getActiveQuiz() //copy and reverse array\r\n  const questions = activeQuiz.questions.slice().reverse()\r\n  return (\r\n    <List>\r\n      {questions.map((question) => {\r\n        return <QuestionListItem question={question} />\r\n      })}\r\n    </List>\r\n  )\r\n})\r\n\r\nexport default QuestionList\r\n","import LinearProgress from \"@mui/material/LinearProgress\"\r\n\r\ninterface LevelProgressProps {\r\n  progress: number\r\n}\r\nconst LevelProgress = ({ progress }: LevelProgressProps) => {\r\n  return <LinearProgress variant=\"determinate\" value={progress} sx={{ height: \"10px\", width: \"100%\", borderRadius: \"5px\" }} />\r\n}\r\nexport default LevelProgress\r\n","import { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\nimport LevelProgress from \"../General/LevelProgress\"\r\nimport Image from \"../General/Image\"\r\nimport { BadgeType } from \"../../constants/badges\"\r\n\r\n// MUI\r\nimport Backdrop from \"@mui/material/Backdrop\"\r\nimport Box from \"@mui/material/Box\"\r\nimport Modal from \"@mui/material/Modal\"\r\nimport Fade from \"@mui/material/Fade\"\r\nimport Button from \"@mui/material/Button\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport List from \"@mui/material/List\"\r\nimport ListItem from \"@mui/material/ListItem\"\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\"\r\nimport ListItemText from \"@mui/material/ListItemText\"\r\nimport TimerOffIcon from \"@mui/icons-material/TimerOff\"\r\nimport StarHalfIcon from \"@mui/icons-material/StarHalf\"\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  minWidth: \"300px\",\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #fff\",\r\n  borderRadius: \"25px\",\r\n  boxShadow: 24,\r\n  p: 3,\r\n}\r\n\r\nconst LevelUp = () => {\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" component=\"h3\" sx={{ mt: 1 }}>\r\n        Level Up!\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\">Earned Jokers</Typography>\r\n      <List dense sx={{ p: 0 }}>\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <StarHalfIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"50:50 Joker\" />\r\n        </ListItem>\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <TimerOffIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Timer-Stop Joker\" />\r\n        </ListItem>\r\n      </List>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface WonBadgesProps {\r\n  badges: BadgeType[]\r\n}\r\nconst WonBadges = ({ badges }: WonBadgesProps) => {\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" component=\"h3\" sx={{ mt: 1 }}>\r\n        New Badges\r\n      </Typography>\r\n      <List dense sx={{ p: 0 }}>\r\n        {badges.map((badge) => {\r\n          return (\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Image fileName={`badges/${badge.img}`} alt={badge.text} className={\"badge\"} />\r\n              </ListItemIcon>\r\n              <ListItemText primary={badge.text} />\r\n            </ListItem>\r\n          )\r\n        })}\r\n      </List>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface GameOverModalProps {\r\n  onClose: () => void\r\n}\r\n\r\nconst GameOverModal = observer(({ onClose }: GameOverModalProps) => {\r\n  const { gameStore, userStore } = useStores()\r\n  const currentUser = userStore.getCurrentUser()\r\n  if (!currentUser) return <></>\r\n\r\n  const open = gameStore.getGameOver()\r\n  const totalPoints = gameStore.getTotalPoints()\r\n  const minusPoints = gameStore.getMinusPoints()\r\n  const earnedPoints = gameStore.getEarnedPoints()\r\n  const level = currentUser.level || 0\r\n  const userTotalPoints = currentUser.points || 0\r\n  const neededPoints = currentUser.getNextLevelPoints()\r\n  const progress = currentUser.getLevelProgress()\r\n  const title = earnedPoints > 0 ? `Congratulations!` : \"Sorry, maybe next time...\"\r\n  const image = earnedPoints > 0 ? <Image fileName={\"winTrophyIcon.png\"} alt={\"Trophy\"} className={\"winIcon\"} /> : null\r\n  const hasLevelUp = gameStore.getHasLevelUp()\r\n  const wonBadges = gameStore.getWonBadges()\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n      open={open}\r\n      onClose={onClose}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={open}>\r\n        <Box sx={style}>\r\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"space-around\" }}>\r\n            <Typography id=\"transition-modal-title\" variant=\"h5\" component=\"h2\">\r\n              {title}\r\n            </Typography>\r\n\r\n            {image}\r\n            {hasLevelUp && <LevelUp />}\r\n\r\n            <Typography variant=\"h6\" component=\"h3\" sx={{ mt: 1 }}>{`Level ${level}`}</Typography>\r\n            {totalPoints !== 0 && totalPoints !== earnedPoints && (\r\n              <Typography>{`${totalPoints.toLocaleString(\"en\")} Total Points`}</Typography>\r\n            )}\r\n            {minusPoints !== 0 && (\r\n              <Typography color=\"#c62828\">{`-${minusPoints.toLocaleString(\"en\")} Points for using joker`}</Typography>\r\n            )}\r\n            <Typography color=\"#2e7d32\">{`+${earnedPoints.toLocaleString(\"en\")} Earned Points`}</Typography>\r\n            <Typography variant=\"h6\" component=\"h3\" sx={{ mt: 1 }}>\r\n              Your Progress\r\n            </Typography>\r\n            <LevelProgress progress={progress} />\r\n            <Typography>{`${userTotalPoints.toLocaleString(\"en\")}/${neededPoints.toLocaleString(\"en\")} Points`}</Typography>\r\n            {wonBadges.length > 0 && <WonBadges badges={wonBadges} />}\r\n          </Box>\r\n          <Button onClick={onClose} sx={{ float: \"right\", mt: \"10px\" }}>\r\n            Close\r\n          </Button>\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  )\r\n})\r\n\r\nexport default GameOverModal\r\n","import TimerOffIcon from \"@mui/icons-material/TimerOff\"\r\nimport StarHalfIcon from \"@mui/icons-material/StarHalf\"\r\nimport { JOKER } from \"../../constants/game\"\r\n\r\ninterface JokerIconProps {\r\n  type: JOKER\r\n}\r\nconst JokerIcon = ({ type }: JokerIconProps) => {\r\n  let icon\r\n  switch (type) {\r\n    case JOKER.JOKER_5050:\r\n      icon = <StarHalfIcon sx={{ mr: 1 }} />\r\n      break\r\n    case JOKER.JOKER_TIMER_STOP:\r\n      icon = <TimerOffIcon sx={{ mr: 1 }} />\r\n      break\r\n  }\r\n\r\n  return icon\r\n}\r\nexport default JokerIcon\r\n","import { useRef } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { ActiveQuestion, ActiveAnswer } from \"../../stores/gameStore\"\r\nimport * as GAME_CONSTANTS from \"../../constants/game\"\r\nimport QuestionList from \"./QuestionList\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\nimport GameOverModal from \"./GameOverModal\"\r\nimport JokerIcon from \"../General/JokerIcon\"\r\n\r\n// MUI\r\nimport CircularProgress from \"@mui/material/CircularProgress\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport IconButton from \"@mui/material/Button\"\r\nimport Grid from \"@mui/material/Grid\"\r\nimport LinearProgress from \"@mui/material/LinearProgress\"\r\nimport Box from \"@mui/material/Box\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Fab from \"@mui/material/Fab\"\r\nimport Badge from \"@mui/material/Badge\"\r\nimport Divider from \"@mui/material/Divider\"\r\n\r\n/**\r\n * Question Component\r\n */\r\ninterface QuestionProps {\r\n  text: string\r\n  imageUrl: string | undefined\r\n}\r\n\r\nconst Question = ({ text, imageUrl }: QuestionProps) => {\r\n  const questionStyle = {\r\n    width: \"100%\",\r\n    p: \"20px\",\r\n    textAlign: \"center\",\r\n    verticalAlign: \"middle\",\r\n    backgroundColor: \"#bbdefb\",\r\n  }\r\n\r\n  return (\r\n    <Paper sx={questionStyle}>\r\n      <Typography variant=\"h6\" component=\"h2\">\r\n        {text}\r\n      </Typography>\r\n      {imageUrl && <img src={imageUrl} alt=\"Question\" className=\"questionImage\" />}\r\n    </Paper>\r\n  )\r\n}\r\n\r\n/**\r\n * Answer Component\r\n */\r\ninterface AnswerProps {\r\n  id: number\r\n  answer: ActiveAnswer\r\n}\r\n\r\nconst Answer = observer(({ id, answer }: AnswerProps) => {\r\n  const { gameStore } = useStores()\r\n  const answerRef = useRef<HTMLButtonElement>(null)\r\n  const WAIT_TIME = 2000 //2s\r\n\r\n  const setAnswerBackground = (reset: boolean) => {\r\n    if (!answerRef?.current) return\r\n    if (reset) {\r\n      answerRef.current.style.backgroundColor = \"\"\r\n      return\r\n    }\r\n    const correctColor = \"#e8f5e9\"\r\n    const wrongColor = \"#ffcdd2\"\r\n    answerRef.current.style.backgroundColor = answer.isCorrect ? correctColor : wrongColor\r\n  }\r\n\r\n  const handleAnswerClick = (answer: ActiveAnswer) => {\r\n    setAnswerBackground(false)\r\n    gameStore.endTimer()\r\n    // wait 2 sec before going to next question\r\n    setTimeout(() => {\r\n      setAnswerBackground(true)\r\n      gameStore.answerSelected(answer)\r\n    }, WAIT_TIME)\r\n  }\r\n\r\n  const answerStyle = {\r\n    width: \"100%\",\r\n    p: \"10px\",\r\n    verticalAlign: \"middle\",\r\n    textTransform: \"unset !important\",\r\n    fontWeight: \"normal\",\r\n  }\r\n\r\n  return (\r\n    <Paper elevation={3} key={id}>\r\n      <IconButton ref={answerRef} variant=\"outlined\" size=\"medium\" onClick={() => handleAnswerClick(answer)} sx={answerStyle}>\r\n        {answer.text}\r\n      </IconButton>\r\n    </Paper>\r\n  )\r\n})\r\n\r\n/**\r\n * Showing of Time Progress Bar\r\n */\r\nconst TimeProgress = observer(() => {\r\n  const { gameStore } = useStores()\r\n  const secondsRemaining = gameStore.getSecondsRemaining()\r\n  const color = secondsRemaining < GAME_CONSTANTS.SECONDS_PER_QUESTION / 4 ? \"error\" : \"primary\"\r\n  //calculate progress based on remaining seconds\r\n  //GAME_CONSTANTS.SECONDS_PER_QUESTION = 100%\r\n  const progress = (secondsRemaining * 100) / GAME_CONSTANTS.SECONDS_PER_QUESTION\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Box sx={{ width: \"100%\", mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" value={progress} color={color} />\r\n      </Box>\r\n      <Box>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {secondsRemaining + \"s\"}\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  )\r\n})\r\n\r\n/**\r\n * Joker Buttons\r\n */\r\nconst Jokers = observer(() => {\r\n  const { gameStore } = useStores()\r\n  const jokers = gameStore.getJokers()\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-evenly\">\r\n      {jokers.map((joker) => {\r\n        return (\r\n          <Badge badgeContent={joker.count} color=\"primary\" key={joker.type}>\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={joker.run}\r\n              disabled={joker.count === 0 || joker.used === true}\r\n              sx={{ minWidth: 120, backgroundColor: \"#e8f5e9\" }}\r\n            >\r\n              <JokerIcon type={joker.type} />\r\n              {joker.name}\r\n            </Fab>\r\n          </Badge>\r\n        )\r\n      })}\r\n    </Box>\r\n  )\r\n})\r\n\r\n//Game\r\ninterface PlayQuizStartedProps {\r\n  activeQuestion: ActiveQuestion\r\n}\r\nconst PlayQuizStarted = observer(({ activeQuestion }: PlayQuizStartedProps) => {\r\n  return (\r\n    <>\r\n      <Grid container spacing={2} flexDirection={{ xs: \"column\", sm: \"row\" }} alignItems={{ xs: \"center\", sm: \"flex-start\" }}>\r\n        <Grid item xs={12} sx={{ width: \"100%\" }}>\r\n          <TimeProgress />\r\n        </Grid>\r\n        <Grid container item xs={12} md={10} spacing={2} sx={{ alignContent: \"flex-start\" }}>\r\n          <Grid item xs={12}>\r\n            <Question text={activeQuestion.question} imageUrl={activeQuestion.imageUrl} />\r\n          </Grid>\r\n          {activeQuestion.answers.slice(0, 2).map((answer, i) => (\r\n            <Grid item xs={6} key={i}>\r\n              <Answer id={i} answer={answer} />\r\n            </Grid>\r\n          ))}\r\n          {activeQuestion.answers.slice(2, 4).map((answer, i) => (\r\n            <Grid item xs={6} key={i}>\r\n              <Answer id={i} answer={answer} />\r\n            </Grid>\r\n          ))}\r\n          <Grid item xs={12}>\r\n            <Divider sx={{ mb: 2 }}>Jokers</Divider>\r\n            <Jokers />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} md={2} sx={{ width: \"100%\", display: { md: \"none\" } }}>\r\n          <Divider>Questions</Divider>\r\n        </Grid>\r\n        <Grid item xs={12} md={2} sx={{ pt: 0 }}>\r\n          <QuestionList />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n})\r\n\r\nconst PlayQuiz = observer(() => {\r\n  const { gameStore } = useStores()\r\n  const activeQuestion: ActiveQuestion | undefined = gameStore.getActiveQuestion()\r\n  const navigate = useNavigate()\r\n\r\n  const onModalClose = () => {\r\n    navigate(ROUTES.PLAY_GAME)\r\n  }\r\n\r\n  if (!activeQuestion) return <CircularProgress />\r\n\r\n  window.onbeforeunload = function () {\r\n    return \"Reloading will abort the current game and your progress will be lost!\"\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PlayQuizStarted activeQuestion={activeQuestion} />\r\n      <GameOverModal onClose={onModalClose} />\r\n    </>\r\n  )\r\n})\r\n\r\nexport default PlayQuiz\r\n","import Header from \"../App/Header\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\nimport QuizTopic from \"../../model/QuizTopic\"\r\nimport { Routes, Route, useNavigate } from \"react-router-dom\"\r\nimport PlayQuizPage from \"./PlayQuiz\"\r\n\r\n// MUI\r\nimport List from \"@mui/material/List\"\r\nimport ListItem from \"@mui/material/ListItem\"\r\nimport ListItemButton from \"@mui/material/ListItemButton\"\r\nimport ListItemText from \"@mui/material/ListItemText\"\r\nimport Divider from \"@mui/material/Divider\"\r\nimport SearchIcon from \"@mui/icons-material/Search\"\r\nimport TextField from \"@mui/material/TextField\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport CircularProgress from \"@mui/material/CircularProgress\"\r\nimport IconButton from \"@mui/material/IconButton\"\r\nimport SportsEsportsIcon from \"@mui/icons-material/SportsEsports\"\r\nimport DoneIcon from \"@mui/icons-material/Done\"\r\nimport Snackbar from \"@mui/material/Snackbar\"\r\n\r\nconst SearchQuiz = observer(() => {\r\n  const { quizStore } = useStores()\r\n  const [searchTerm, setSearchTerm] = useState<string>(\"\")\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value)\r\n    quizStore.filterAllQuizTopicsByName(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Divider textAlign=\"left\">Search Quiz</Divider>\r\n      <TextField\r\n        fullWidth\r\n        id=\"searchQuiz\"\r\n        label=\"Enter Quiz Name\"\r\n        variant=\"outlined\"\r\n        InputProps={{ endAdornment: <SearchIcon /> }}\r\n        value={searchTerm}\r\n        onChange={handleChange}\r\n      />\r\n    </>\r\n  )\r\n})\r\n\r\ninterface QuizTopicListItemProp {\r\n  quizTopic: QuizTopic\r\n}\r\nconst QuizTopicListItem = observer(({ quizTopic }: QuizTopicListItemProp) => {\r\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false)\r\n  const [snackbartext, setSnackbartext] = useState<string>(\"\")\r\n  const { gameStore, quizStore } = useStores()\r\n  const navigate = useNavigate()\r\n  const isCompleted = quizStore.isQuizTopicCompleted(quizTopic)\r\n\r\n  const handleClick = (quizTopic: QuizTopic): void => {\r\n    if (!quizTopic.isActive) {\r\n      setSnackbartext(\"Quiz is inactive. Please contact teacher for activation.\")\r\n      setOpenSnackbar(true)\r\n      return\r\n    }\r\n    if (isCompleted) {\r\n      setSnackbartext(\"Quiz already completed. To see questions/answers, go to achievements.\")\r\n      setOpenSnackbar(true)\r\n      return\r\n    }\r\n    gameStore.startGame(quizTopic)\r\n    navigate(quizTopic.quizTopicId)\r\n  }\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackbartext(\"\")\r\n    setOpenSnackbar(false)\r\n  }\r\n\r\n  const icon = isCompleted ? <DoneIcon color=\"success\" /> : <SportsEsportsIcon />\r\n  return (\r\n    <>\r\n      <ListItem\r\n        disablePadding\r\n        secondaryAction={\r\n          <IconButton edge=\"end\" aria-label=\"view\" onClick={() => handleClick(quizTopic)}>\r\n            {icon}\r\n          </IconButton>\r\n        }\r\n        disabled={!quizTopic.isActive}\r\n      >\r\n        <ListItemButton onClick={() => handleClick(quizTopic)}>\r\n          <ListItemText primary={quizTopic.name} secondary={`Created by: ${quizTopic.createdByName}`} />\r\n        </ListItemButton>\r\n      </ListItem>\r\n      <Snackbar open={openSnackbar} autoHideDuration={5000} message={snackbartext} onClose={handleSnackbarClose} />\r\n    </>\r\n  )\r\n})\r\n\r\nconst QuizTopicList = observer(() => {\r\n  const { quizStore } = useStores()\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    quizStore.pullAllQuizTopics().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const allQuizTopics = quizStore.getSearchQuizTopics()\r\n\r\n  return (\r\n    <>\r\n      <Divider textAlign=\"left\">Select Quiz</Divider>\r\n      {isLoading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <List>\r\n          {allQuizTopics?.map((quizTopic, i) => (\r\n            <QuizTopicListItem quizTopic={quizTopic} key={i} />\r\n          ))}\r\n        </List>\r\n      )}\r\n    </>\r\n  )\r\n})\r\n\r\nconst SelectGamePage = () => {\r\n  return (\r\n    <>\r\n      <Header title=\"Play\" />\r\n      <Stack spacing={2}>\r\n        <SearchQuiz />\r\n        <QuizTopicList />\r\n      </Stack>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function PlayGame() {\r\n  return (\r\n    <>\r\n      <Routes>\r\n        <Route path=\"/\" element={<SelectGamePage />} />\r\n        <Route path=\":id\" element={<PlayQuizPage />} />\r\n      </Routes>\r\n    </>\r\n  )\r\n}\r\n","import * as ROUTES from \"../../constants/routes\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n// Material-UI\r\nimport Button from \"@mui/material/Button\"\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <Button>\r\n      <Link to={ROUTES.LANDING}>Back Home</Link>\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default NotFound\r\n","import Header from \"../App/Header\"\r\nimport { useEffect } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\n\r\n// MUI\r\nimport Table from \"@mui/material/Table\"\r\nimport TableBody from \"@mui/material/TableBody\"\r\nimport TableCell from \"@mui/material/TableCell\"\r\nimport TableContainer from \"@mui/material/TableContainer\"\r\nimport TableHead from \"@mui/material/TableHead\"\r\nimport TableRow from \"@mui/material/TableRow\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport CircularProgress from \"@mui/material/CircularProgress\"\r\nimport Box from \"@mui/material/Box\"\r\n\r\nconst Leaderboard = observer(() => {\r\n  const { userStore } = useStores()\r\n  const currentUserId = userStore.getCurrentUserId()\r\n\r\n  useEffect(() => {\r\n    userStore.pullLeaderboardUsers()\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const allUsers = userStore.getLeaderboardUsers()\r\n\r\n  return (\r\n    <>\r\n      <Header title=\"Leaderboard\" />\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table size=\"small\" aria-label=\"a dense table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell sx={{ width: 10 }}>Nr.</TableCell>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>Points</TableCell>\r\n              <TableCell>Level</TableCell>\r\n              <TableCell>Games Played</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {allUsers?.map((user, i) => (\r\n              <TableRow\r\n                key={i}\r\n                sx={{\r\n                  \"&:last-child td, &:last-child th\": { border: 0 },\r\n                  backgroundColor: currentUserId === user.userId ? \"#e8f5e9\" : null,\r\n                }}\r\n              >\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {i + 1}\r\n                </TableCell>\r\n                <TableCell>{user.getName()}</TableCell>\r\n                <TableCell>{user.points.toLocaleString(\"en\")}</TableCell>\r\n                <TableCell>{user.level}</TableCell>\r\n                <TableCell>{user.gamesPlayedCount}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {/* Loading Spinner */}\r\n      {!allUsers && (\r\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n    </>\r\n  )\r\n})\r\nexport default Leaderboard\r\n","import { useState, useEffect } from \"react\"\r\nimport Header from \"../App/Header\"\r\nimport { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport Quiz, { Question } from \"../../model/Quiz\"\r\n\r\n// MUI\r\nimport Card from \"@mui/material/Card\"\r\nimport CardContent from \"@mui/material/CardContent\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport CircularProgress from \"@mui/material/CircularProgress\"\r\n\r\ninterface QuestionProp {\r\n  question: Question\r\n}\r\nconst QuestionItem = observer(({ question }: QuestionProp) => {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"div\">\r\n          Question: {question.text}\r\n        </Typography>\r\n        <Typography variant=\"body1\">Correct Answer: {question.correctAnswer}</Typography>\r\n        {question.imageUrl && <img src={question.imageUrl} alt=\"Question\" className=\"questionImage\" />}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n})\r\n\r\nconst CompletedQuiz = observer(() => {\r\n  const [selectedQuiz, setSelectedQuiz] = useState<Quiz>()\r\n  const [isLoading, setIsLoading] = useState<boolean>(true)\r\n  const { userStore } = useStores()\r\n  const currentUser = userStore.getCurrentUser()\r\n\r\n  if (!currentUser) return <></>\r\n\r\n  //get id from url\r\n  const { id: quizTopicId } = useParams()\r\n\r\n  if (!quizTopicId) return <CircularProgress />\r\n\r\n  useEffect(() => {\r\n    Quiz.GetByTopic(quizTopicId)\r\n      .then((quiz) => {\r\n        setSelectedQuiz(quiz)\r\n        setIsLoading(false)\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"could not load quiz\")\r\n      })\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Header title=\"Completed Quiz\" />\r\n      {isLoading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <Stack spacing={2}>\r\n          {selectedQuiz?.questions.map((question, i) => {\r\n            return <QuestionItem question={question} key={i} />\r\n          })}\r\n        </Stack>\r\n      )}\r\n    </>\r\n  )\r\n})\r\nexport default CompletedQuiz\r\n","import Header from \"../App/Header\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport { useStores } from \"../../stores\"\r\nimport { getBadge, ALL_BADGES } from \"../../constants/badges\"\r\nimport LevelProgress from \"../General/LevelProgress\"\r\nimport User from \"../../model/User\"\r\nimport JokerIcon from \"../General/JokerIcon\"\r\nimport { jokerName } from \"../../constants/game\"\r\nimport { includes } from \"lodash\"\r\nimport { BADGES } from \"../../constants/badges\"\r\nimport { Routes, Route, useNavigate } from \"react-router-dom\"\r\nimport QuizTopic from \"../../model/QuizTopic\"\r\nimport CompletedQuizPage from \"./CompletedQuiz\"\r\nimport Image from \"../General/Image\"\r\n\r\n// MUI\r\nimport List from \"@mui/material/List\"\r\nimport ListItem from \"@mui/material/ListItem\"\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\"\r\nimport ListItemText from \"@mui/material/ListItemText\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Card from \"@mui/material/Card\"\r\nimport CardContent from \"@mui/material/CardContent\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport Badge from \"@mui/material/Badge\"\r\nimport CircularProgress from \"@mui/material/CircularProgress\"\r\nimport ListItemButton from \"@mui/material/ListItemButton\"\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\"\r\nimport IconButton from \"@mui/material/IconButton\"\r\n\r\ninterface LevelProp {\r\n  user: User\r\n}\r\nconst Level = ({ user }: LevelProp) => {\r\n  const totalPoints = user.points || 0\r\n  const neededPoints = user.getNextLevelPoints()\r\n  const progress = user.getLevelProgress()\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {`Level ${user.level}`}\r\n        </Typography>\r\n        <LevelProgress progress={progress} />\r\n        <Typography>{`${totalPoints.toLocaleString(\"en\")} / ${neededPoints.toLocaleString(\"en\")} Points`}</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\ninterface BadgesProp {\r\n  user: User\r\n}\r\ninterface BadgeItemProp {\r\n  badgeType: BADGES\r\n}\r\nconst Badges = ({ user }: BadgesProp) => {\r\n  const userBadges = user.badges\r\n  let remainingBadges: BADGES[] = []\r\n\r\n  ALL_BADGES.forEach((badge) => {\r\n    if (!includes(userBadges, badge.type)) {\r\n      remainingBadges.push(badge.type)\r\n    }\r\n  })\r\n\r\n  const BadgeItem = ({ badgeType }: BadgeItemProp) => {\r\n    const badge = getBadge(badgeType)\r\n    return (\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <Image fileName={`badges/${badge.img}`} alt={badge.text} className={\"badge\"} />\r\n        </ListItemIcon>\r\n        <ListItemText primary={badge.text} />\r\n      </ListItem>\r\n    )\r\n  }\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Badges\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\">Your Badges</Typography>\r\n        <List>\r\n          {userBadges.map((badge, i) => {\r\n            return <BadgeItem badgeType={badge} key={badge} />\r\n          })}\r\n        </List>\r\n\r\n        {remainingBadges.length > 0 && (\r\n          <>\r\n            <Typography variant=\"subtitle1\">Remaining Badges</Typography>\r\n            <List>\r\n              {remainingBadges.map((badge) => {\r\n                return <BadgeItem badgeType={badge} key={badge} />\r\n              })}\r\n            </List>\r\n          </>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\ninterface JokersProp {\r\n  user: User\r\n}\r\nconst Jokers = ({ user }: JokersProp) => {\r\n  const jokers = user.jokers\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Jokers\r\n        </Typography>\r\n        <List>\r\n          {jokers.map((joker, i) => {\r\n            return (\r\n              <ListItem key={i}>\r\n                <ListItemIcon>\r\n                  <Badge badgeContent={joker.count} color=\"primary\" showZero>\r\n                    <JokerIcon type={joker.type} />\r\n                  </Badge>\r\n                </ListItemIcon>\r\n                <ListItemText primary={jokerName(joker.type)} />\r\n              </ListItem>\r\n            )\r\n          })}\r\n        </List>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst CompletedQuizTopicList = observer(() => {\r\n  const { quizStore } = useStores()\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n  const navigate = useNavigate()\r\n  const completedQuizTopics = quizStore.getCompletedQuizTopics()\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    quizStore.pullAllCompletedQuizTopicsOfUser().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleClick = (quizTopic: QuizTopic): void => {\r\n    navigate(quizTopic.quizTopicId)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            Completed Quiz\r\n          </Typography>\r\n          {completedQuizTopics.length === 0 && <Typography variant=\"subtitle1\">None</Typography>}\r\n          {isLoading ? (\r\n            <CircularProgress />\r\n          ) : (\r\n            <List>\r\n              {completedQuizTopics?.map((quizTopic, i) => (\r\n                <ListItem\r\n                  disablePadding\r\n                  key={i}\r\n                  secondaryAction={\r\n                    <IconButton edge=\"end\" aria-label=\"view\" onClick={() => handleClick(quizTopic)}>\r\n                      <VisibilityIcon />\r\n                    </IconButton>\r\n                  }\r\n                >\r\n                  <ListItemButton onClick={() => handleClick(quizTopic)}>\r\n                    <ListItemText primary={quizTopic.name} secondary={`Created by: ${quizTopic.createdByName}`} />\r\n                  </ListItemButton>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  )\r\n})\r\n\r\nconst AchievementsOverview = observer(() => {\r\n  const { userStore } = useStores()\r\n  const currentUser = userStore.getCurrentUser()\r\n  if (!currentUser) return <></>\r\n  return (\r\n    <>\r\n      <Header title=\"Achievements\" />\r\n      <Stack spacing={2}>\r\n        <Level user={currentUser} />\r\n        <Jokers user={currentUser} />\r\n        <Badges user={currentUser} />\r\n        <CompletedQuizTopicList />\r\n      </Stack>\r\n    </>\r\n  )\r\n})\r\n\r\nconst Achievements = observer(() => {\r\n  return (\r\n    <>\r\n      <Routes>\r\n        <Route path=\"/\" element={<AchievementsOverview />} />\r\n        <Route path=\":id\" element={<CompletedQuizPage />} />\r\n      </Routes>\r\n    </>\r\n  )\r\n})\r\nexport default Achievements\r\n","import { useState } from \"react\"\r\nimport { useStores } from \"../../stores\"\r\nimport { FIREBASE_ERRORS } from \"../../constants/firebase\"\r\nimport { useFormik } from \"formik\"\r\nimport * as yup from \"yup\"\r\n\r\n// Material-UI\r\nimport Alert from \"@mui/material/Alert\"\r\nimport TextField from \"@mui/material/TextField\"\r\nimport Button from \"@mui/material/Button\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Box from \"@mui/material/Box\"\r\nimport Card from \"@mui/material/Card\"\r\nimport CardContent from \"@mui/material/CardContent\"\r\n\r\ninterface FormValues {\r\n  password1: string\r\n  password2: string\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n  password1: yup.string().min(8, \"Password should be of minimum 8 characters length\").required(\"Password is required\"),\r\n  password2: yup\r\n    .string()\r\n    .min(8, \"Password should be of minimum 8 characters length\")\r\n    .required(\"Password is required\")\r\n    .oneOf([yup.ref(\"password1\"), null], \"Password must match\"),\r\n})\r\n\r\nexport default function UpdatePassword() {\r\n  const { authStore } = useStores()\r\n  const [error, setError] = useState<string>()\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n  const onFinish = (values: FormValues) => {\r\n    setIsLoading(true)\r\n    authStore\r\n      .doUpdatePassword(values.password1)\r\n      .then(() => {\r\n        authStore.doSignOut()\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message)\r\n        setError(FIREBASE_ERRORS[error.code] || \"Unexpected Error\")\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false)\r\n      })\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password1: \"\",\r\n      password2: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values: FormValues) => {\r\n      onFinish(values)\r\n    },\r\n  })\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          New Password\r\n        </Typography>\r\n        <Box component=\"form\" onSubmit={formik.handleSubmit} noValidate sx={{ mt: 1 }}>\r\n          <TextField\r\n            fullWidth\r\n            margin=\"normal\"\r\n            id=\"password1\"\r\n            name=\"password1\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            autoFocus\r\n            value={formik.values.password1}\r\n            autoComplete=\"new-password\"\r\n            onChange={formik.handleChange}\r\n            error={formik.touched.password1 && Boolean(formik.errors.password1)}\r\n            helperText={formik.touched.password1 && formik.errors.password1}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            margin=\"normal\"\r\n            id=\"password2\"\r\n            name=\"password2\"\r\n            label=\"Confirm Password\"\r\n            type=\"password\"\r\n            value={formik.values.password2}\r\n            onChange={formik.handleChange}\r\n            autoComplete=\"new-password\"\r\n            error={formik.touched.password2 && Boolean(formik.errors.password2)}\r\n            helperText={formik.touched.password2 && formik.errors.password2}\r\n          />\r\n          <Button sx={{ mt: 3 }} color=\"primary\" variant=\"contained\" fullWidth type=\"submit\" disabled={isLoading}>\r\n            Set new password\r\n          </Button>\r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mt: 1 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n","import Header from \"../App/Header\"\r\nimport { useStores } from \"../../stores\"\r\nimport { observer } from \"mobx-react\"\r\nimport User from \"../../model/User\"\r\nimport UpdatePassword from \"./UpdatePassword\"\r\n\r\n// MUI\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Card from \"@mui/material/Card\"\r\nimport CardContent from \"@mui/material/CardContent\"\r\nimport Stack from \"@mui/material/Stack\"\r\n\r\ninterface AccountInformationProp {\r\n  user: User\r\n}\r\nconst AccountInformation = observer(({ user }: AccountInformationProp) => {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Account Information\r\n        </Typography>\r\n        <Typography variant=\"body1\">Name: {user.getName()}</Typography>\r\n        <Typography variant=\"body1\">Email: {user.email}</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n})\r\n\r\nconst Account = observer(() => {\r\n  const { userStore } = useStores()\r\n  const currentUser = userStore.getCurrentUser()\r\n  if (!currentUser) return <></>\r\n\r\n  return (\r\n    <>\r\n      <Header title=\"Account\" />\r\n      <Stack spacing={2}>\r\n        <AccountInformation user={currentUser} />\r\n        <UpdatePassword />\r\n      </Stack>\r\n    </>\r\n  )\r\n})\r\nexport default Account\r\n","import { observer } from \"mobx-react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { useStores } from \"../../stores\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\n\r\ntype Props = {\r\n  Component: React.FunctionComponent<any>\r\n}\r\nconst ProtectedRoute = observer(({ Component }: Props) => {\r\n  const { authStore } = useStores()\r\n  const isAuthenticated: boolean = authStore.isAuthenticated()\r\n\r\n  return isAuthenticated ? <Component /> : <Navigate to={ROUTES.LANDING} />\r\n})\r\n\r\nexport default ProtectedRoute\r\n","import ResponsiveAppBar from \"../AppBar\"\r\nimport LandingPage from \"../Landing\"\r\nimport SignUpPage from \"../SignUp\"\r\nimport SignInPage from \"../SignIn\"\r\nimport CreateQuizPage from \"../CreateQuiz\"\r\nimport CreateQuizFormPage from \"../CreateQuiz/CreateQuizForm\"\r\nimport PlayGamePage from \"../Game\"\r\nimport NotFoundPage from \"./NotFound\"\r\nimport LeaderboardPage from \"../Leaderboard\"\r\nimport AchievementsPage from \"../Achievements\"\r\nimport AccountPage from \"../Account\"\r\nimport * as ROUTES from \"../../constants/routes\"\r\nimport ProtectedRoute from \"./ProtectedRoute\"\r\n\r\n//Router\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\"\r\n\r\n// Material-UI\r\nimport Container from \"@mui/material/Container\"\r\nimport CssBaseline from \"@mui/material/CssBaseline\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router basename=\"/bachelor-thesis\">\r\n        <CssBaseline />\r\n        <ResponsiveAppBar />\r\n\r\n        <Container maxWidth=\"xl\" sx={{ height: \"100%\", p: \"10px\" }}>\r\n          <Routes>\r\n            <Route path={ROUTES.LANDING} element={<LandingPage />} />\r\n            <Route path={ROUTES.SIGN_UP} element={<SignUpPage />} />\r\n            <Route path={ROUTES.SIGN_IN} element={<SignInPage />} />\r\n            <Route path={ROUTES.CREATE_QUIZ} element={<ProtectedRoute Component={CreateQuizPage} />} />\r\n            <Route path={ROUTES.CREATE_QUIZ_FORM} element={<ProtectedRoute Component={CreateQuizFormPage} />} />\r\n            <Route path={ROUTES.PLAY_GAME + \"/*\"} element={<ProtectedRoute Component={PlayGamePage} />} />\r\n            <Route path={ROUTES.LEADERBOARD} element={<ProtectedRoute Component={LeaderboardPage} />} />\r\n            <Route path={ROUTES.ACHIEVEMENTS + \"/*\"} element={<ProtectedRoute Component={AchievementsPage} />} />\r\n            <Route path={ROUTES.ACCOUNT} element={<ProtectedRoute Component={AccountPage} />} />\r\n            <Route element={<NotFoundPage />} />\r\n          </Routes>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./components/App\"\n\n//CSS\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}